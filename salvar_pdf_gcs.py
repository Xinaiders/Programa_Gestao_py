#!/usr/bin/env python3
"""
Fun√ß√µes para salvar PDFs no Google Cloud Storage
"""

import os
from google.cloud import storage as gcs
from google.oauth2.service_account import Credentials
import json
import io

def get_gcs_client():
    """Cria cliente do Google Cloud Storage"""
    try:
        creds = None
        project_id = None
        
        # Debug: verificar ambiente
        is_cloud_run = os.environ.get('K_SERVICE') is not None
        print(f"üåê Ambiente detectado: {'Cloud Run' if is_cloud_run else 'Local'}")
        print(f"üîç Vari√°veis de ambiente dispon√≠veis:")
        print(f"   - K_SERVICE: {os.environ.get('K_SERVICE', 'N√ÉO DEFINIDA')}")
        print(f"   - GOOGLE_SERVICE_ACCOUNT_INFO: {'DEFINIDA' if os.environ.get('GOOGLE_SERVICE_ACCOUNT_INFO') else 'N√ÉO DEFINIDA'}")
        print(f"   - GCS_BUCKET_NAME: {os.environ.get('GCS_BUCKET_NAME', 'N√ÉO DEFINIDA')}")
        
        # Op√ß√£o 1: Ler de vari√°vel de ambiente (Cloud Run/Produ√ß√£o)
        service_account_info = os.environ.get('GOOGLE_SERVICE_ACCOUNT_INFO')
        if service_account_info:
            print("üìã Carregando credenciais da vari√°vel de ambiente...")
            try:
                # Tentar fazer parse do JSON
                info = json.loads(service_account_info)
                creds = Credentials.from_service_account_info(info)
                project_id = info.get('project_id')
                print(f"‚úÖ Credenciais carregadas da vari√°vel de ambiente (Projeto: {project_id})")
            except json.JSONDecodeError as e:
                print(f"‚ùå ERRO: JSON inv√°lido na vari√°vel GOOGLE_SERVICE_ACCOUNT_INFO: {e}")
                print(f"‚ùå Primeiros 100 caracteres: {service_account_info[:100]}")
                return None
            except Exception as e:
                print(f"‚ùå ERRO ao processar credenciais da vari√°vel: {e}")
                import traceback
                traceback.print_exc()
                return None
        
        # Op√ß√£o 2: Ler de arquivo local (Desenvolvimento)
        if not creds:
            credential_file = 'gestaosolicitacao-fe66ad097590.json'
            if os.path.exists(credential_file):
                print(f"üìã Carregando credenciais do arquivo: {credential_file}")
                try:
                    with open(credential_file, 'r', encoding='utf-8') as f:
                        info = json.load(f)
                        creds = Credentials.from_service_account_info(info)
                        project_id = info.get('project_id')
                    print(f"‚úÖ Credenciais carregadas do arquivo (Projeto: {project_id})")
                except Exception as e:
                    print(f"‚ùå ERRO ao ler arquivo de credenciais: {e}")
                    return None
            else:
                if is_cloud_run:
                    print(f"‚ö†Ô∏è ATEN√á√ÉO: No Cloud Run e arquivo {credential_file} n√£o encontrado")
                    print(f"‚ö†Ô∏è Verifique se a vari√°vel GOOGLE_SERVICE_ACCOUNT_INFO est√° configurada!")
                else:
                    print(f"‚ö†Ô∏è Arquivo de credenciais n√£o encontrado: {credential_file}")
                    print("‚ö†Ô∏è Tentando usar Application Default Credentials...")
        
        # Criar cliente
        if creds and project_id:
            try:
                client = gcs.Client(credentials=creds, project=project_id)
                print(f"‚úÖ Cliente GCS criado com credenciais (Projeto: {project_id})")
                return client
            except Exception as e:
                print(f"‚ùå ERRO ao criar cliente GCS com credenciais: {e}")
                import traceback
                traceback.print_exc()
                return None
        else:
            # Fallback: Application Default Credentials (s√≥ funciona se a service account do Cloud Run tiver permiss√µes)
            if is_cloud_run:
                print("‚ö†Ô∏è ATEN√á√ÉO: Tentando usar Application Default Credentials no Cloud Run")
                print("‚ö†Ô∏è Certifique-se que a service account do Cloud Run tem permiss√µes no bucket!")
            else:
                print("‚ö†Ô∏è Usando Application Default Credentials")
            try:
                client = gcs.Client()
                print("‚úÖ Cliente GCS criado com Application Default Credentials")
                return client
            except Exception as e:
                print(f"‚ùå ERRO ao criar cliente GCS com Application Default Credentials: {e}")
                import traceback
                traceback.print_exc()
                return None
            
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO ao criar cliente GCS: {e}")
        import traceback
        traceback.print_exc()
        return None

def salvar_pdf_gcs(pdf_content, romaneio_id, bucket_name='romaneios-separacao', is_reprint=False):
    """
    Salva PDF no Google Cloud Storage
    
    Args:
        pdf_content: Conte√∫do do PDF em bytes
        romaneio_id: ID do romaneio (ex: ROM-000001)
        bucket_name: Nome do bucket
        is_reprint: Se √© uma reimpress√£o/c√≥pia
    
    Returns:
        str: Caminho do arquivo no GCS (gs://bucket/file.pdf) ou None se erro
    """
    try:
        print(f"‚òÅÔ∏è === IN√çCIO: Salvando PDF no Cloud Storage ===")
        print(f"‚òÅÔ∏è Romaneio ID: {romaneio_id}")
        print(f"‚òÅÔ∏è Bucket: {bucket_name}")
        print(f"‚òÅÔ∏è Tamanho do PDF: {len(pdf_content)} bytes")
        
        # Criar cliente
        client = get_gcs_client()
        if not client:
            print("‚ùå ERRO: N√£o foi poss√≠vel criar cliente GCS")
            return None
        
        # Obter bucket
        bucket = client.bucket(bucket_name)
        
        # Nome do arquivo
        if is_reprint:
            filename = f"{romaneio_id}_Copia.pdf"
        else:
            filename = f"{romaneio_id}.pdf"
        
        # Caminho completo no GCS
        blob = bucket.blob(filename)
        
        # Upload do arquivo
        print(f"üì§ Fazendo upload de {len(pdf_content)} bytes para {filename}...")
        try:
            blob.upload_from_string(pdf_content, content_type='application/pdf')
            gcs_path = f"gs://{bucket_name}/{filename}"
            print(f"‚úÖ === SUCESSO: PDF salvo no Cloud Storage ===")
            print(f"‚úÖ Caminho: {gcs_path}")
            return gcs_path
        except Exception as upload_error:
            print(f"‚ùå ERRO durante upload: {upload_error}")
            import traceback
            traceback.print_exc()
            return None
        
    except Exception as e:
        print(f"‚ùå === ERRO CR√çTICO ao salvar PDF no Cloud Storage ===")
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return None

def buscar_pdf_gcs(romaneio_id, bucket_name='romaneios-separacao'):
    """
    Busca PDF do Google Cloud Storage
    
    Args:
        romaneio_id: ID do romaneio
        bucket_name: Nome do bucket
    
    Returns:
        bytes: Conte√∫do do PDF ou None se n√£o encontrado
    """
    try:
        print(f"üîç Buscando PDF no Cloud Storage: {romaneio_id}")
        
        # Criar cliente
        client = get_gcs_client()
        if not client:
            return None
        
        # Obter bucket
        bucket = client.bucket(bucket_name)
        
        # Tentar arquivo original
        blob = bucket.blob(f"{romaneio_id}.pdf")
        if blob.exists():
            print(f"‚úÖ PDF original encontrado: {romaneio_id}.pdf")
            return blob.download_as_bytes()
        
        # Tentar arquivo de c√≥pia
        blob_copia = bucket.blob(f"{romaneio_id}_Copia.pdf")
        if blob_copia.exists():
            print(f"‚úÖ PDF de c√≥pia encontrado: {romaneio_id}_Copia.pdf")
            return blob_copia.download_as_bytes()
        
        print(f"‚ùå PDF n√£o encontrado: {romaneio_id}")
        return None
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar PDF no Cloud Storage: {e}")
        return None

def verificar_pdf_existe_gcs(romaneio_id, bucket_name='romaneios-separacao'):
    """
    Verifica se PDF existe no Cloud Storage
    
    Args:
        romaneio_id: ID do romaneio
        bucket_name: Nome do bucket
    
    Returns:
        bool: True se existe, False caso contr√°rio
    """
    try:
        client = get_gcs_client()
        if not client:
            return False
        
        bucket = client.bucket(bucket_name)
        
        # Verificar arquivo original
        if bucket.blob(f"{romaneio_id}.pdf").exists():
            return True
        
        # Verificar arquivo de c√≥pia
        if bucket.blob(f"{romaneio_id}_Copia.pdf").exists():
            return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar PDF: {e}")
        return False


