# Script para configurar vari√°veis de ambiente do Cloud Storage no Cloud Run
# Autor: Sistema de Gest√£o
# Data: 2025

Write-Host "`n=== CONFIGURAR CLOUD STORAGE NO CLOUD RUN ===" -ForegroundColor Cyan
Write-Host ""

# Configura√ß√µes
$SERVICE_NAME = "programa-gestao-py"
$REGION = "us-central1"
$PROJECT_ID = "gestaosolicitacao"
$CREDENTIAL_FILE = "gestaosolicitacao-fe66ad097590.json"
$BUCKET_NAME = "romaneios-separacao"

# Cores
$GREEN = "Green"
$YELLOW = "Yellow"
$RED = "Red"
$BLUE = "Blue"

# Verificar se est√° no diret√≥rio correto
if (-not (Test-Path $CREDENTIAL_FILE)) {
    Write-Host "‚ùå ERRO: Arquivo de credenciais n√£o encontrado: $CREDENTIAL_FILE" -ForegroundColor $RED
    Write-Host "   Certifique-se de estar no diret√≥rio do projeto!" -ForegroundColor $YELLOW
    exit 1
}

# Verificar se gcloud est√° instalado
try {
    gcloud --version 2>&1 | Out-Null
    Write-Host "‚úÖ gcloud CLI encontrado" -ForegroundColor $GREEN
} catch {
    Write-Host "‚ùå ERRO: gcloud CLI n√£o encontrado!" -ForegroundColor $RED
    Write-Host "   Instale: https://cloud.google.com/sdk/docs/install" -ForegroundColor $YELLOW
    exit 1
}

# Verificar se est√° autenticado
Write-Host "`nüîê Verificando autentica√ß√£o..." -ForegroundColor $BLUE
try {
    $currentAccount = gcloud config get-value account 2>&1
    if ($currentAccount -match "ERROR") {
        Write-Host "‚ö†Ô∏è N√£o autenticado. Fazendo login..." -ForegroundColor $YELLOW
        gcloud auth login
    } else {
        Write-Host "‚úÖ Autenticado como: $currentAccount" -ForegroundColor $GREEN
    }
} catch {
    Write-Host "‚ùå Erro ao verificar autentica√ß√£o" -ForegroundColor $RED
    exit 1
}

# Configurar projeto
Write-Host "`nüì¶ Configurando projeto..." -ForegroundColor $BLUE
gcloud config set project $PROJECT_ID 2>&1 | Out-Null
Write-Host "‚úÖ Projeto configurado: $PROJECT_ID" -ForegroundColor $GREEN

# Passo 1: Ler e converter credenciais JSON
Write-Host "`nüìã Passo 1: Processando credenciais..." -ForegroundColor $BLUE
try {
    # Ler o arquivo JSON
    $jsonContent = Get-Content $CREDENTIAL_FILE -Raw -Encoding UTF8
    
    # Converter para JSON e depois de volta para garantir formato v√°lido (uma linha)
    $jsonObject = $jsonContent | ConvertFrom-Json
    $jsonOneLine = $jsonObject | ConvertTo-Json -Compress -Depth 10
    
    # Escapar caracteres especiais para PowerShell (especialmente $)
    $jsonOneLine = $jsonOneLine -replace '\$', '`$'
    
    Write-Host "‚úÖ Credenciais processadas (tamanho: $($jsonOneLine.Length) caracteres)" -ForegroundColor $GREEN
} catch {
    Write-Host "‚ùå ERRO ao processar arquivo JSON: $_" -ForegroundColor $RED
    exit 1
}

# Passo 2: Verificar se o servi√ßo existe
Write-Host "`nüîç Passo 2: Verificando servi√ßo Cloud Run..." -ForegroundColor $BLUE
try {
    $serviceInfo = gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)" 2>&1
    if ($serviceInfo -match "ERROR") {
        Write-Host "‚ùå Servi√ßo n√£o encontrado: $SERVICE_NAME" -ForegroundColor $RED
        Write-Host "   Certifique-se que o servi√ßo foi implantado primeiro!" -ForegroundColor $YELLOW
        exit 1
    }
    Write-Host "‚úÖ Servi√ßo encontrado: $SERVICE_NAME" -ForegroundColor $GREEN
} catch {
    Write-Host "‚ùå Erro ao verificar servi√ßo: $_" -ForegroundColor $RED
    exit 1
}

# Passo 3: Atualizar vari√°vel GOOGLE_SERVICE_ACCOUNT_INFO
Write-Host "`n‚òÅÔ∏è Passo 3: Configurando GOOGLE_SERVICE_ACCOUNT_INFO..." -ForegroundColor $BLUE
Write-Host "   (Isso pode levar alguns segundos...)" -ForegroundColor $YELLOW
Write-Host "   ‚ö†Ô∏è IMPORTANTE: Usando --update-env-vars para n√£o sobrescrever outras vari√°veis!" -ForegroundColor $YELLOW
try {
    # Usar --update-env-vars para adicionar/atualizar SEM remover outras vari√°veis
    # --set-env-vars SUBSTITUI todas as vari√°veis (problema que causava perda de outras configs)
    $result1 = gcloud run services update $SERVICE_NAME `
        --region=$REGION `
        --update-env-vars="GOOGLE_SERVICE_ACCOUNT_INFO=$jsonOneLine" `
        2>&1
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Vari√°vel GOOGLE_SERVICE_ACCOUNT_INFO configurada/atualizada com sucesso!" -ForegroundColor $GREEN
    } else {
        Write-Host "‚ùå ERRO ao configurar GOOGLE_SERVICE_ACCOUNT_INFO" -ForegroundColor $RED
        Write-Host "   Erro: $result1" -ForegroundColor $RED
        exit 1
    }
} catch {
    Write-Host "‚ùå ERRO ao configurar GOOGLE_SERVICE_ACCOUNT_INFO: $_" -ForegroundColor $RED
    exit 1
}

# Passo 4: Atualizar vari√°vel GCS_BUCKET_NAME
Write-Host "`nüì¶ Passo 4: Configurando GCS_BUCKET_NAME..." -ForegroundColor $BLUE
try {
    $envVar2 = "GCS_BUCKET_NAME=$BUCKET_NAME"
    $result2 = gcloud run services update $SERVICE_NAME `
        --region=$REGION `
        --update-env-vars="$envVar2" `
        2>&1
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Vari√°vel GCS_BUCKET_NAME configurada: $BUCKET_NAME" -ForegroundColor $GREEN
    } else {
        Write-Host "‚ùå ERRO ao configurar GCS_BUCKET_NAME" -ForegroundColor $RED
        Write-Host "   Erro: $result2" -ForegroundColor $RED
        exit 1
    }
} catch {
    Write-Host "‚ùå ERRO ao configurar GCS_BUCKET_NAME: $_" -ForegroundColor $RED
    exit 1
}

# Passo 5: Verificar vari√°veis configuradas
Write-Host "`nüîç Passo 5: Verificando vari√°veis configuradas..." -ForegroundColor $BLUE
try {
    $envVars = gcloud run services describe $SERVICE_NAME `
        --region=$REGION `
        --format="value(spec.template.spec.containers[0].env)" `
        2>&1
    
    Write-Host "`nüìã Vari√°veis de ambiente configuradas:" -ForegroundColor $BLUE
    
    if ($envVars -match "GOOGLE_SERVICE_ACCOUNT_INFO") {
        Write-Host "   ‚úÖ GOOGLE_SERVICE_ACCOUNT_INFO: DEFINIDA" -ForegroundColor $GREEN
    } else {
        Write-Host "   ‚ùå GOOGLE_SERVICE_ACCOUNT_INFO: N√ÉO ENCONTRADA" -ForegroundColor $RED
    }
    
    if ($envVars -match "GCS_BUCKET_NAME") {
        Write-Host "   ‚úÖ GCS_BUCKET_NAME: DEFINIDA" -ForegroundColor $GREEN
    } else {
        Write-Host "   ‚ùå GCS_BUCKET_NAME: N√ÉO ENCONTRADA" -ForegroundColor $RED
    }
    
} catch {
    Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel verificar vari√°veis: $_" -ForegroundColor $YELLOW
}

# Passo 6: Verificar permiss√µes no bucket
Write-Host "`nüîê Passo 6: Verificando permiss√µes no bucket..." -ForegroundColor $BLUE
try {
    $serviceAccountEmail = "gestsolicitacao@gestaosolicitacao.iam.gserviceaccount.com"
    Write-Host "   Service Account: $serviceAccountEmail" -ForegroundColor $BLUE
    
    Write-Host "   ‚ö†Ô∏è Verifique manualmente se a service account tem as permiss√µes:" -ForegroundColor $YELLOW
    Write-Host "      - Storage Object Creator" -ForegroundColor $YELLOW
    Write-Host "      - Storage Object Viewer" -ForegroundColor $YELLOW
    Write-Host "   Link: https://console.cloud.google.com/iam-admin/iam?project=$PROJECT_ID" -ForegroundColor $BLUE
} catch {
    Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel verificar permiss√µes" -ForegroundColor $YELLOW
}

# Resumo final
Write-Host "`n=== CONFIGURA√á√ÉO CONCLU√çDA ===" -ForegroundColor Cyan
Write-Host ""
Write-Host "‚úÖ Vari√°veis de ambiente configuradas no Cloud Run!" -ForegroundColor $GREEN
Write-Host ""
Write-Host "üìù Pr√≥ximos passos:" -ForegroundColor $BLUE
Write-Host "   1. Aguarde alguns segundos para o Cloud Run atualizar" -ForegroundColor White
Write-Host "   2. Teste criando um romaneio em:" -ForegroundColor White
Write-Host "      https://programa-gestao-py-661879898685.us-central1.run.app/" -ForegroundColor White
Write-Host "   3. Verifique os logs em:" -ForegroundColor White
Write-Host "      https://console.cloud.google.com/run/detail/$REGION/$SERVICE_NAME/logs?project=$PROJECT_ID" -ForegroundColor White
Write-Host ""
Write-Host "üîç Nos logs, procure por:" -ForegroundColor $BLUE
Write-Host "   ‚úÖ '‚úÖ Credenciais carregadas da vari√°vel de ambiente'" -ForegroundColor $GREEN
Write-Host "   ‚úÖ '‚úÖ PDF salvo no Cloud Storage'" -ForegroundColor $GREEN
Write-Host "   ‚ùå '‚ùå ERRO' (se houver problemas)" -ForegroundColor $RED
Write-Host ""

