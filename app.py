from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, make_response
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from flask_wtf.csrf import CSRFProtect
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import os
import math
import pandas as pd
import hashlib
import uuid
import requests
import io
import gspread
from google.oauth2.service_account import Credentials
import threading
import time
from functools import lru_cache

app = Flask(__name__)

# Configura√ß√£o do SECRET_KEY - Usar vari√°vel de ambiente no Google Cloud
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')

# Configura√ß√£o do banco de dados
# Se estiver no Google Cloud, usar Cloud SQL
if os.environ.get('GAE_ENV'):  # Google App Engine
    db_user = os.environ.get('DB_USER', 'root')
    db_pass = os.environ.get('DB_PASS', '')
    db_name = os.environ.get('DB_NAME', 'estoque')
    cloud_sql_connection_name = os.environ.get('CLOUD_SQL_CONNECTION_NAME')
    
    if cloud_sql_connection_name:
        # Usar Cloud SQL
        app.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+pymysql://{db_user}:{db_pass}@/{db_name}?unix_socket=/cloudsql/{cloud_sql_connection_name}'
    else:
        # Fallback para SQLite no Cloud Storage
        app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///estoque.db')
else:
    # Desenvolvimento local
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///estoque.db')

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)
csrf = CSRFProtect(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Sistema de Cache Inteligente para otimiza√ß√£o de performance
class CacheManager:
    def __init__(self):
        self.cache = {}
        self.cache_timestamps = {}
        self.cache_duration = 60  # 1 minuto (reduzido para dados mais frescos)
        self.last_sheets_update = {}  # Controla √∫ltima atualiza√ß√£o do Google Sheets
    
    def get_cache_key(self, func_name, *args, **kwargs):
        """Gera uma chave √∫nica para o cache baseada na fun√ß√£o e argumentos"""
        key_data = f"{func_name}:{str(args)}:{str(sorted(kwargs.items()))}"
        return hashlib.md5(key_data.encode()).hexdigest()
    
    def get(self, key, force_refresh=False):
        """Recupera dados do cache se ainda v√°lidos"""
        if force_refresh:
            self.invalidate_key(key)
            return None
            
        if key in self.cache and key in self.cache_timestamps:
            if time.time() - self.cache_timestamps[key] < self.cache_duration:
                return self.cache[key]
            else:
                # Cache expirado, remover
                del self.cache[key]
                del self.cache_timestamps[key]
        return None
    
    def set(self, key, value):
        """Armazena dados no cache"""
        self.cache[key] = value
        self.cache_timestamps[key] = time.time()
    
    def clear(self):
        """Limpa todo o cache"""
        self.cache.clear()
        self.cache_timestamps.clear()
        self.last_sheets_update.clear()
    
    def invalidate_key(self, key):
        """Invalida uma chave espec√≠fica do cache"""
        if key in self.cache:
            del self.cache[key]
        if key in self.cache_timestamps:
            del self.cache_timestamps[key]
    
    def invalidate_pattern(self, pattern):
        """Invalida cache que contenha um padr√£o espec√≠fico"""
        keys_to_remove = [k for k in self.cache.keys() if pattern in k]
        for key in keys_to_remove:
            self.invalidate_key(key)
    
    def invalidate_sheets_data(self):
        """Invalida todos os dados relacionados ao Google Sheets"""
        print("üîÑ Invalidando cache do Google Sheets...")
        self.invalidate_pattern("get_google_sheets")
        self.invalidate_pattern("buscar_solicitacoes")
        self.last_sheets_update.clear()
    
    def should_refresh_sheets(self, func_name):
        """Verifica se deve atualizar dados do Google Sheets"""
        current_time = time.time()
        last_update = self.last_sheets_update.get(func_name, 0)
        
        # For√ßar refresh se passou mais de 30 segundos
        if current_time - last_update > 30:
            self.last_sheets_update[func_name] = current_time
            return True
        return False

# Inst√¢ncia global do cache
cache_manager = CacheManager()

# Sistema de status de gera√ß√£o de PDF
pdf_generation_status = {}

def cached_function(cache_duration=60, force_refresh_interval=30):
    """Decorator para cachear resultados de fun√ß√µes com refresh inteligente"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            cache_key = cache_manager.get_cache_key(func.__name__, *args, **kwargs)
            
            # Verificar se deve for√ßar refresh
            force_refresh = cache_manager.should_refresh_sheets(func.__name__)
            
            cached_result = cache_manager.get(cache_key, force_refresh=force_refresh)
            
            if cached_result is not None and not force_refresh:
                print(f"üöÄ Cache HIT para {func.__name__}")
                return cached_result
            
            if force_refresh:
                print(f"üîÑ Refresh for√ßado para {func.__name__} (dados podem ter mudado)")
            else:
                print(f"‚è≥ Cache MISS para {func.__name__}, executando...")
                
            result = func(*args, **kwargs)
            cache_manager.set(cache_key, result)
            return result
        return wrapper
    return decorator

# Modelos do banco de dados
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Produto(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    codigo = db.Column(db.String(50), unique=True, nullable=False)
    descricao = db.Column(db.Text)
    categoria = db.Column(db.String(50))
    preco = db.Column(db.Float)
    estoque_atual = db.Column(db.Integer, default=0)
    estoque_minimo = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Solicitacao(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    data = db.Column(db.DateTime, nullable=False)
    solicitante = db.Column(db.String(100), nullable=False)
    codigo = db.Column(db.String(50), nullable=False)
    descricao = db.Column(db.String(200), nullable=False)
    unidade = db.Column(db.String(20), nullable=False)
    quantidade = db.Column(db.Integer, nullable=False)
    locacao = db.Column(db.String(50))
    media = db.Column(db.Float, default=0)
    status = db.Column(db.String(20), default='pendente')
    qtd_separada = db.Column(db.Integer, default=0)
    saldo = db.Column(db.Integer, default=0)
    data_separacao = db.Column(db.DateTime)
    separado_por = db.Column(db.String(100))
    observacoes = db.Column(db.Text)
    alta_demanda = db.Column(db.Boolean, default=False)
    status_2 = db.Column(db.String(20))
    estoque_congelado = db.Column(db.Boolean, default=False)
    prazo_entrega = db.Column(db.String(50))
    fornecedor = db.Column(db.String(100))
    
    # Campos de controle interno
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Impressao(db.Model):
    """Tabela para controle de impress√µes"""
    id = db.Column(db.Integer, primary_key=True)
    id_impressao = db.Column(db.String(50), unique=True, nullable=False)  # Chave √∫nica da impress√£o
    data_impressao = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    usuario_impressao = db.Column(db.String(100), nullable=False)
    status = db.Column(db.String(20), default='Pendente')  # Pendente, Processada, Cancelada
    total_itens = db.Column(db.Integer, default=0)
    observacoes = db.Column(db.Text)
    data_processamento = db.Column(db.DateTime)
    usuario_processamento = db.Column(db.String(100))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relacionamento com itens da impress√£o
    itens = db.relationship('ImpressaoItem', backref='impressao', lazy=True, cascade='all, delete-orphan')

class ImpressaoItem(db.Model):
    """Tabela para itens de cada impress√£o"""
    id = db.Column(db.Integer, primary_key=True)
    id_impressao = db.Column(db.Integer, db.ForeignKey('impressao.id'), nullable=False)
    id_solicitacao = db.Column(db.String(100), nullable=False)  # ID √∫nico da solicita√ß√£o
    data_solicitacao = db.Column(db.DateTime, nullable=False)
    solicitante = db.Column(db.String(100), nullable=False)
    codigo = db.Column(db.String(50), nullable=False)
    descricao = db.Column(db.String(200), nullable=False)
    unidade = db.Column(db.String(20), nullable=False)
    quantidade = db.Column(db.Integer, nullable=False)
    locacao = db.Column(db.String(50))
    saldo_estoque = db.Column(db.Integer, default=0)
    media_consumo = db.Column(db.Float, default=0)
    status_item = db.Column(db.String(20), default='Pendente')  # Pendente, Separado, Parcial, Cancelado
    qtd_separada = db.Column(db.Integer, default=0)
    observacoes_item = db.Column(db.Text)
    data_separacao = db.Column(db.DateTime)
    separado_por = db.Column(db.String(100))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

# Tabela MatrizImportada removida - dados agora v√™m diretamente do Google Sheets

# ===== FUN√á√ïES DE GERA√á√ÉO DE IDs √öNICOS =====

def gerar_id_solicitacao(data, solicitante, codigo, quantidade, timestamp=None):
    """Gera ID √∫nico para solicita√ß√£o baseado em seus dados principais"""
    if timestamp is None:
        # Usar microssegundos para garantir unicidade
        now = datetime.now()
        timestamp = now.strftime('%H%M%S%f')[:-3]  # Incluir milissegundos
    
    # Limpar e normalizar nome do solicitante
    solicitante_clean = str(solicitante).strip().upper().replace(' ', '_')[:10]  # M√°ximo 10 caracteres
    
    # Criar string √∫nica combinando todos os campos + timestamp completo
    dados_combinados = f"{data}_{solicitante}_{codigo}_{quantidade}_{timestamp}_{datetime.now().microsecond}"
    
    # Gerar hash MD5 e pegar primeiros 8 caracteres
    hash_obj = hashlib.md5(dados_combinados.encode())
    hash_hex = hash_obj.hexdigest()[:8].upper()
    
    # Formato: SOL_YYYYMMDD_HHMMSSMMM_SOLICITANTE_XXXX (incluindo solicitante)
    data_str = data.strftime('%Y%m%d') if isinstance(data, datetime) else str(data)[:10].replace('-', '')
    return f"SOL_{data_str}_{timestamp}_{solicitante_clean}_{hash_hex}"


def gerar_id_impressao(usuario, timestamp=None):
    """Gera ID √∫nico para impress√£o (formato num√©rico simples)"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        impressoes_worksheet = sheet.worksheet("IMPRESSOES")
        all_values = impressoes_worksheet.get_all_values()
        
        # Encontrar o pr√≥ximo n√∫mero sequencial
        proximo_numero = 1
        
        if len(all_values) > 1:  # Se h√° dados al√©m do cabe√ßalho
            # Buscar o maior n√∫mero existente
            numeros_existentes = []
            for row in all_values[1:]:
                if len(row) > 0 and row[0].startswith('ROM-'):
                    try:
                        # Extrair n√∫mero do formato ROM-000001
                        numero_str = row[0].split('-')[1]
                        numero = int(numero_str)
                        numeros_existentes.append(numero)
                    except (ValueError, IndexError):
                        continue
            
            if numeros_existentes:
                proximo_numero = max(numeros_existentes) + 1
        
        # Formato: ROM-000001, ROM-000002, etc.
        return f"ROM-{proximo_numero:06d}"
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar ID de impress√£o: {e}")
        # Fallback para formato antigo se houver erro
        if timestamp is None:
            timestamp = datetime.now()
        data_str = timestamp.strftime('%Y%m%d_%H%M%S')
        hash_hex = hashlib.md5(f"{usuario}_{timestamp}".encode()).hexdigest()[:6].upper()
        return f"IMP_{data_str}_{hash_hex}"

# ===== FUN√á√ïES DE CONTROLE DE IMPRESS√ïES NO GOOGLE SHEETS =====

def criar_aba_impressoes():
    """Cria a aba IMPRESSOES no Google Sheets se n√£o existir"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        # Verificar se a aba j√° existe
        try:
            worksheet = sheet.worksheet("IMPRESSOES")
            print("‚úÖ Aba IMPRESSOES j√° existe")
            return worksheet
        except gspread.WorksheetNotFound:
            pass
        
        # Criar nova aba
        worksheet = sheet.add_worksheet(title="IMPRESSOES", rows=1000, cols=20)
        
        # Definir cabe√ßalhos
        headers = [
            "ID_IMPRESSAO", "DATA_IMPRESSAO", "USUARIO_IMPRESSAO", "STATUS", 
            "TOTAL_ITENS", "OBSERVACOES", "DATA_PROCESSAMENTO", "USUARIO_PROCESSAMENTO",
            "CREATED_AT", "UPDATED_AT"
        ]
        
        worksheet.append_row(headers)
        
        # Formatar cabe√ßalho
        worksheet.format('A1:J1', {
            'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.8},
            'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
        })
        
        print("‚úÖ Aba IMPRESSOES criada com sucesso!")
        return worksheet
        
    except Exception as e:
        print(f"‚ùå Erro ao criar aba IMPRESSOES: {e}")
        return None

def criar_aba_impressao_itens():
    """Cria a aba IMPRESSAO_ITENS no Google Sheets se n√£o existir"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        # Verificar se a aba j√° existe
        try:
            worksheet = sheet.worksheet("IMPRESSAO_ITENS")
            print("‚úÖ Aba IMPRESSAO_ITENS j√° existe")
            return worksheet
        except gspread.WorksheetNotFound:
            pass
        
        # Criar nova aba
        worksheet = sheet.add_worksheet(title="IMPRESSAO_ITENS", rows=5000, cols=25)
        
        # Definir cabe√ßalhos
        headers = [
            "ID_IMPRESSAO", "ID_SOLICITACAO", "DATA_SOLICITACAO", "SOLICITANTE", 
            "CODIGO", "DESCRICAO", "UNIDADE", "QUANTIDADE", "LOCALIZACAO",
            "SALDO_ESTOQUE", "MEDIA_CONSUMO", "STATUS_ITEM", "QTD_SEPARADA",
            "OBSERVACOES_ITEM", "DATA_SEPARACAO", "SEPARADO_POR", "CREATED_AT", "UPDATED_AT"
        ]
        
        worksheet.append_row(headers)
        
        # Formatar cabe√ßalho
        worksheet.format('A1:R1', {
            'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.8},
            'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
        })
        
        print("‚úÖ Aba IMPRESSAO_ITENS criada com sucesso!")
        return worksheet
        
    except Exception as e:
        print(f"‚ùå Erro ao criar aba IMPRESSAO_ITENS: {e}")
        return None

def inicializar_abas_controle():
    """Inicializa as abas de controle de impress√µes"""
    print("üîÑ Inicializando abas de controle de impress√µes...")
    
    impressoes_worksheet = criar_aba_impressoes()
    itens_worksheet = criar_aba_impressao_itens()
    
    if impressoes_worksheet and itens_worksheet:
        print("‚úÖ Abas de controle inicializadas com sucesso!")
        return True
    else:
        print("‚ùå Erro ao inicializar abas de controle")
        return False

def criar_impressao(usuario, solicitacoes_selecionadas, observacoes=""):
    """Cria uma nova impress√£o no Google Sheets"""
    try:
        # Primeiro, garantir que as colunas existem
        if not criar_colunas_impressao_itens():
            raise Exception("N√£o foi poss√≠vel criar/verificar colunas IMPRESSAO_ITENS")
            
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        # Gerar ID √∫nico da impress√£o
        id_impressao = gerar_id_impressao(usuario)
        data_impressao = datetime.now()
        
        # Acessar abas
        impressoes_worksheet = sheet.worksheet("IMPRESSOES")
        itens_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
        
        # Criar registro da impress√£o
        impressao_data = [
            id_impressao,
            data_impressao.strftime('%Y-%m-%d %H:%M:%S'),
            usuario,
            'Pendente',
            len(solicitacoes_selecionadas),
            observacoes,
            '',  # DATA_PROCESSAMENTO
            '',  # USUARIO_PROCESSAMENTO
            data_impressao.strftime('%Y-%m-%d %H:%M:%S'),  # CREATED_AT
            data_impressao.strftime('%Y-%m-%d %H:%M:%S')   # UPDATED_AT
        ]
        
        impressoes_worksheet.append_row(impressao_data)
        
        # Criar registros dos itens e adicionar ID_SOLICITACAO na aba Solicita√ß√µes
        solicitacoes_worksheet = sheet.worksheet("Solicita√ß√µes")
        solicitacoes_values = solicitacoes_worksheet.get_all_values()
        header_solicitacoes = solicitacoes_values[0] if solicitacoes_values else []
        
        # ID_SOLICITACAO est√° na coluna P (√≠ndice 15)
        id_solicitacao_col = 15  # Coluna P
        print(f"üîç Usando coluna P (√≠ndice {id_solicitacao_col}) para ID_SOLICITACAO")
        
        # Verificar se a coluna P existe
        if len(header_solicitacoes) <= id_solicitacao_col:
            print(f"‚ùå Coluna P n√£o existe. Total de colunas: {len(header_solicitacoes)}")
            print(f"üîç Header completo: {header_solicitacoes}")
            # Adicionar coluna ID_SOLICITACAO se n√£o existir
            print("üìù Adicionando coluna ID_SOLICITACAO na aba Solicita√ß√µes...")
            solicitacoes_worksheet.insert_cols([["ID_SOLICITACAO"]], 1)
            id_solicitacao_col = 0
            # Atualizar dados
            solicitacoes_values = solicitacoes_worksheet.get_all_values()
            header_solicitacoes = solicitacoes_values[0]
        
        # Encontrar colunas para busca
        codigo_col = None
        solicitante_col = None
        for i, col_name in enumerate(header_solicitacoes):
            col_name_clean = col_name.strip().lower()
            if 'c√≥digo' in col_name_clean or 'codigo' in col_name_clean:
                codigo_col = i
            elif 'solicitante' in col_name_clean:
                solicitante_col = i
        
        print(f"üîç Colunas encontradas - C√≥digo: {codigo_col}, Solicitante: {solicitante_col}")
        
        atualizacoes_solicitacoes = []
        
        for solicitacao in solicitacoes_selecionadas:
            codigo = solicitacao.get('codigo', '')
            solicitante = solicitacao.get('solicitante', '')
            
            print(f"üîç Verificando status para: {codigo} - {solicitante}")
            
            # Verificar status da solicita√ß√£o na aba Solicita√ß√µes
            status_solicitacao = None
            if codigo_col is not None and solicitante_col is not None:
                for i, row in enumerate(solicitacoes_values[1:], start=2):
                    if (len(row) > max(codigo_col, solicitante_col) and
                        row[codigo_col].strip() == codigo and
                        row[solicitante_col].strip() == solicitante):
                        
                        # Encontrar coluna Status
                        status_col = None
                        for j, col_name in enumerate(header_solicitacoes):
                            if col_name.strip().lower() == 'status':
                                status_col = j
                                break
                        
                        if status_col is not None and len(row) > status_col:
                            status_solicitacao = row[status_col].strip()
                            print(f"   Status encontrado: {status_solicitacao}")
                        break
            
            # Validar se pode imprimir
            if status_solicitacao == 'Em Separa√ß√£o':
                print(f"‚ùå Solicita√ß√£o {codigo} j√° est√° 'Em Separa√ß√£o' - n√£o pode imprimir novamente!")
                raise Exception(f"Solicita√ß√£o {codigo} j√° est√° sendo processada (Status: Em Separa√ß√£o). Aguarde o processamento atual.")
            elif status_solicitacao == 'Conclu√≠da':
                print(f"‚ùå Solicita√ß√£o {codigo} j√° foi totalmente processada (Status: Conclu√≠da) - n√£o pode imprimir novamente!")
                raise Exception(f"Solicita√ß√£o {codigo} j√° foi totalmente processada (Status: Conclu√≠da). N√£o √© poss√≠vel reimprimir.")
            elif status_solicitacao not in ['Aberto', 'Parcial', '']:
                print(f"‚ö†Ô∏è Status inesperado: {status_solicitacao} para {codigo}")
            
            print(f"‚úÖ Status permitido para impress√£o: {status_solicitacao}")
            
            # Gerar novo ID_SOLICITACAO apenas se status permitir
            solicitacao['id_solicitacao'] = gerar_id_solicitacao(
                solicitacao.get('data', data_impressao),
                solicitacao.get('solicitante', ''),
                solicitacao.get('codigo', ''),
                solicitacao.get('quantidade', 0)
            )
            print(f"üÜï Gerando novo ID: {solicitacao['id_solicitacao']}")
            
            print(f"üîç Processando solicita√ß√£o: {solicitacao.get('codigo', '')} - {solicitacao.get('solicitante', '')}")
            print(f"   ID_SOLICITACAO: {solicitacao['id_solicitacao']}")
            
            # SUBSTITUIR ID_SOLICITACAO na aba Solicita√ß√µes (SEMPRE)
            if codigo_col is not None and solicitante_col is not None:
                codigo = solicitacao.get('codigo', '')
                solicitante = solicitacao.get('solicitante', '')
                
                print(f"   Buscando na aba Solicita√ß√µes: C√≥digo='{codigo}', Solicitante='{solicitante}'")
                
                # Buscar linha correspondente na aba Solicita√ß√µes
                encontrado = False
                for i, row in enumerate(solicitacoes_values[1:], start=2):
                    print(f"   Linha {i}: {row[:3]}... (total: {len(row)} colunas)")
                    if (len(row) > max(codigo_col, solicitante_col) and
                        row[codigo_col].strip() == codigo and
                        row[solicitante_col].strip() == solicitante):
                        
                        print(f"   ‚úÖ Linha {i} encontrada!")
                        # SEMPRE substituir o ID_SOLICITACAO (mesmo se j√° existir)
                        atualizacoes_solicitacoes.append({
                            'range': f'{chr(65 + id_solicitacao_col)}{i}',
                            'values': [[solicitacao['id_solicitacao']]]
                        })
                        print(f"üîÑ SUBSTITUINDO ID_SOLICITACAO na linha {i}: {solicitacao['id_solicitacao']}")
                        encontrado = True
                        break
                
                if not encontrado:
                    print(f"‚ùå Solicita√ß√£o n√£o encontrada na aba Solicita√ß√µes!")
            else:
                print(f"‚ùå Colunas de busca n√£o encontradas!")
            
            # Estrutura correta da aba IMPRESSAO_ITENS
            item_data = [
                id_impressao,  # ID_IMPRESSAO (coluna A)
                solicitacao['id_solicitacao'],  # ID_SOLICITACAO (coluna B)
                solicitacao.get('data', data_impressao).strftime('%Y-%m-%d %H:%M:%S') if hasattr(solicitacao.get('data'), 'strftime') else str(solicitacao.get('data', '')),  # DATA (coluna C)
                solicitacao.get('solicitante', ''),  # SOLICITANTE (coluna D)
                solicitacao.get('codigo', ''),  # CODIGO (coluna E)
                solicitacao.get('descricao', ''),  # DESCRICAO (coluna F)
                solicitacao.get('unidade', ''),  # UNIDADE (coluna G)
                solicitacao.get('quantidade', 0),  # QUANTIDADE (coluna H)
                solicitacao.get('locacao_matriz', '1 E5 E03/F03'),  # LOCACAO_MATRIZ (coluna I)
                solicitacao.get('saldo_estoque', 600),  # SALDO_ESTOQUE (coluna J)
                solicitacao.get('media_mensal', 41),  # MEDIA_MENSAL (coluna K)
                solicitacao.get('alta_demanda', False),  # ALTA_DEMANDA (coluna L)
                'Pendente',  # STATUS_ITEM (coluna M)
                0,  # QTD_SEPARADA (coluna N)
                '',  # OBSERVACOES_ITEM (coluna O)
                '',  # DATA_SEPARACAO (coluna P)
                '',  # SEPARADO_POR (coluna Q)
                '',  # USUARIO_PROCESSAMENTO (coluna R)
                data_impressao.strftime('%Y-%m-%d %H:%M:%S'),  # CREATED_AT (coluna S)
                data_impressao.strftime('%Y-%m-%d %H:%M:%S')   # UPDATED_AT (coluna T)
            ]
            
            print(f"üìã Criando item na IMPRESSAO_ITENS:")
            print(f"   ID_Impressao: {id_impressao}")
            print(f"   ID_Solicitacao: {solicitacao['id_solicitacao']}")
            print(f"   Codigo: {solicitacao.get('codigo', '')}")
            print(f"   Solicitante: {solicitacao.get('solicitante', '')}")
            print(f"   Quantidade: {solicitacao.get('quantidade', 0)}")
            print(f"   Total de colunas: {len(item_data)}")
            
            itens_worksheet.append_row(item_data)
        
        # Executar atualiza√ß√µes de ID_SOLICITACAO na aba Solicita√ß√µes
        if atualizacoes_solicitacoes:
            print(f"üîÑ Executando {len(atualizacoes_solicitacoes)} atualiza√ß√µes de ID_SOLICITACAO...")
            solicitacoes_worksheet.batch_update(atualizacoes_solicitacoes)
            print(f"‚úÖ {len(atualizacoes_solicitacoes)} IDs adicionados na aba Solicita√ß√µes!")
        
        # Atualizar status das solicita√ß√µes para "Em Separa√ß√£o" na aba Solicita√ß√µes
        print("üîÑ Atualizando status das solicita√ß√µes para 'Em Separa√ß√£o'...")
        
        try:
            # Usar √≠ndices das linhas (IDs simples) em vez de IDs complexos
            ids_para_atualizar = [sol.get('id', '') for sol in solicitacoes_selecionadas if sol.get('id')]
            
            if ids_para_atualizar:
                # Usar atualiza√ß√£o otimizada
                sucesso_status = atualizar_status_rapido(ids_para_atualizar)
                
                if sucesso_status:
                    print(f"‚úÖ Status atualizado para 'Em Separa√ß√£o' - {len(ids_para_atualizar)} solicita√ß√µes")
                else:
                    print("‚ö†Ô∏è Erro ao atualizar status das solicita√ß√µes")
            else:
                print("‚ö†Ô∏è Nenhum ID encontrado para atualizar")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao atualizar status: {e}")
            import traceback
            traceback.print_exc()
        
        # Gerar PDF usando o HTML j√° renderizado (otimizado)
        print("üîÑ Gerando PDF do romaneio...")
        
        # Detectar se est√° rodando no Google Cloud
        import os
        import threading
        
        if os.getenv('GAE_APPLICATION'):
            # Google Cloud - usar ReportLab
            from pdf_cloud_generator import salvar_pdf_cloud
            pdf_function = salvar_pdf_cloud
        else:
            # Desenvolvimento local - usar Chrome headless
            from pdf_browser_generator import salvar_pdf_direto_html
            pdf_function = salvar_pdf_direto_html
        
        # Preparar dados do romaneio
        romaneio_data = {
            'id_impressao': id_impressao,
            'data_impressao': data_impressao.strftime('%d/%m/%Y, %H:%M:%S'),
            'usuario_impressao': usuario,
            'status': 'Pendente',
            'total_itens': len(solicitacoes_selecionadas),
            'observacoes': observacoes
        }
        
        # Preparar dados dos itens
        itens_data = []
        for solicitacao in solicitacoes_selecionadas:
            item = {
                'data': solicitacao.get('data', data_impressao).strftime('%d/%m/%Y') if hasattr(solicitacao.get('data'), 'strftime') else str(solicitacao.get('data', '')),
                'solicitante': solicitacao.get('solicitante', ''),
                'codigo': solicitacao.get('codigo', ''),
                'descricao': solicitacao.get('descricao', ''),
                'quantidade': solicitacao.get('quantidade', 0),
                'alta_demanda': getattr(solicitacao, 'alta_demanda', False),
                'locacao_matriz': solicitacao.get('locacao_matriz', '1 E5 E03/F03'),
                'saldo_estoque': solicitacao.get('saldo_estoque', 600),
                'media_mensal': solicitacao.get('media_mensal', 41),
                'qtd_pendente': solicitacao.get('quantidade', 0),
                'qtd_separada': 0
            }
            itens_data.append(item)
        
        # Recuperar tipo_romaneio do cache
        tipo_romaneio = 'Romaneio de Separa√ß√£o'
        if 'romaneio_info' in globals() and id_impressao in globals()['romaneio_info']:
            tipo_romaneio = globals()['romaneio_info'][id_impressao]
        
        # Renderizar o template HTML (igual ao que aparece na tela)
        html_content = render_template('formulario_impressao.html', 
                                     id_impressao=id_impressao,
                                     solicitacoes=itens_data,
                                     tipo_romaneio=tipo_romaneio)
        
        # OTIMIZA√á√ÉO: Salvar PDF em thread separada para n√£o bloquear a resposta
        def gerar_pdf_async():
            try:
                # Marcar como iniciado
                pdf_generation_status[id_impressao] = {
                    'status': 'gerando',
                    'inicio': datetime.now().strftime('%H:%M:%S'),
                    'progresso': 0
                }
                
                print(f"üîÑ Iniciando gera√ß√£o de PDF em background para {id_impressao}...")
                
                # Simular progresso
                pdf_generation_status[id_impressao]['progresso'] = 25
                
                resultado = pdf_function(html_content, romaneio_data, pasta_destino='Romaneios_Separacao', is_reprint=False)
                
                if resultado['success']:
                    pdf_generation_status[id_impressao] = {
                        'status': 'concluido',
                        'inicio': pdf_generation_status[id_impressao]['inicio'],
                        'fim': datetime.now().strftime('%H:%M:%S'),
                        'progresso': 100,
                        'arquivo': resultado.get('file_path', '')
                    }
                    print(f"‚úÖ PDF gerado com sucesso: {resultado['message']}")
                    if 'file_path' in resultado:
                        print(f"üìÅ Arquivo salvo: {resultado['file_path']}")
                else:
                    pdf_generation_status[id_impressao] = {
                        'status': 'erro',
                        'inicio': pdf_generation_status[id_impressao]['inicio'],
                        'fim': datetime.now().strftime('%H:%M:%S'),
                        'progresso': 0,
                        'erro': resultado['message']
                    }
                    print(f"‚ö†Ô∏è Erro na gera√ß√£o do PDF: {resultado['message']}")
            except Exception as e:
                pdf_generation_status[id_impressao] = {
                    'status': 'erro',
                    'inicio': pdf_generation_status.get(id_impressao, {}).get('inicio', ''),
                    'fim': datetime.now().strftime('%H:%M:%S'),
                    'progresso': 0,
                    'erro': str(e)
                }
                print(f"‚ö†Ô∏è Erro ao gerar PDF em background: {e}")
        
        # Executar gera√ß√£o de PDF em thread separada (N√ÉO BLOQUEIA)
        pdf_thread = threading.Thread(target=gerar_pdf_async, name=f"PDF-{id_impressao}")
        pdf_thread.daemon = True
        pdf_thread.start()
        
        print(f"‚úÖ Impress√£o {id_impressao} criada com {len(solicitacoes_selecionadas)} itens")
        print(f"üöÄ PDF sendo gerado em background...")
        return id_impressao
        
    except Exception as e:
        print(f"‚ùå Erro ao criar impress√£o: {e}")
        return None

def buscar_impressoes_pendentes():
    """Busca impress√µes com status Pendente"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        impressoes_worksheet = sheet.worksheet("IMPRESSOES")
        all_values = impressoes_worksheet.get_all_values()
        
        if len(all_values) < 2:
            return []
        
        headers = all_values[0]
        impressoes = []
        
        for row in all_values[1:]:
            if len(row) >= 4 and row[3] == 'Pendente':  # STATUS
                impressao = {
                    'id_impressao': row[0],
                    'data_impressao': row[1],
                    'usuario_impressao': row[2],
                    'status': row[3],
                    'total_itens': int(row[4]) if row[4].isdigit() else 0,
                    'observacoes': row[5] if len(row) > 5 else ''
                }
                impressoes.append(impressao)
        
        # Ordenar por ID num√©rico (mais recente primeiro)
        impressoes.sort(key=lambda x: int(x['id_impressao'].split('-')[1]) if '-' in x['id_impressao'] else 0, reverse=True)
        
        return impressoes
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar impress√µes pendentes: {e}")
        return []

def buscar_todas_impressoes():
    """Busca todas as impress√µes (independente do status)"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        impressoes_worksheet = sheet.worksheet("IMPRESSOES")
        all_values = impressoes_worksheet.get_all_values()
        
        if len(all_values) < 2:
            return []
        
        headers = all_values[0]
        impressoes = []
        
        for row in all_values[1:]:
            if len(row) >= 4:  # Verificar se tem colunas suficientes
                impressao = {
                    'id_impressao': row[0],
                    'data_impressao': row[1],
                    'usuario_impressao': row[2],
                    'status': row[3],
                    'total_itens': int(row[4]) if row[4].isdigit() else 0,
                    'observacoes': row[5] if len(row) > 5 else ''
                }
                impressoes.append(impressao)
        
        # Ordenar por ID num√©rico (mais recente primeiro)
        impressoes.sort(key=lambda x: int(x['id_impressao'].split('-')[1]) if '-' in x['id_impressao'] else 0, reverse=True)
        
        return impressoes
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar todas as impress√µes: {e}")
        return []

def buscar_impressao_por_id(id_impressao):
    """Busca impress√£o espec√≠fica por ID"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        impressoes_worksheet = sheet.worksheet("IMPRESSOES")
        all_values = impressoes_worksheet.get_all_values()
        
        if len(all_values) < 2:
            return None
        
        for row in all_values[1:]:
            if len(row) >= 1 and row[0] == id_impressao:
                return {
                    'id_impressao': row[0],
                    'data_impressao': row[1],
                    'usuario_impressao': row[2],
                    'status': row[3],
                    'total_itens': int(row[4]) if row[4].isdigit() else 0,
                    'observacoes': row[5] if len(row) > 5 else '',
                    'data_processamento': row[6] if len(row) > 6 else '',
                    'usuario_processamento': row[7] if len(row) > 7 else ''
                }
        
        return None
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar impress√£o por ID: {e}")
        return None

def buscar_itens_impressao(id_impressao):
    """Busca itens de uma impress√£o espec√≠fica"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        itens_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
        all_values = itens_worksheet.get_all_values()
        
        if len(all_values) < 2:
            return []
        
        headers = all_values[0]
        itens = []
        
        for row in all_values[1:]:
            if len(row) >= 2 and row[0] == id_impressao:  # ID_IMPRESSAO
                item = {
                    'id_impressao': row[0],
                    'id_solicitacao': row[1],
                    'data_solicitacao': row[2],
                    'solicitante': row[3],
                    'codigo': row[4],
                    'descricao': row[5],
                    'unidade': row[6],
                    'quantidade': int(row[7]) if row[7].isdigit() else 0,
                    'localizacao': row[8],
                    'saldo_estoque': int(row[9]) if row[9].isdigit() else 0,
                    'media_consumo': float(row[10]) if row[10].replace('.', '').isdigit() else 0,
                    'status_item': 'Pendente' if row[12].lower() in ['false', '0', ''] else ('Processado' if row[12].lower() in ['true', '1', 'processado'] else row[12]),
                    'qtd_separada': int(row[13]) if len(row) > 13 and row[13].isdigit() else 0,
                    'observacoes_item': row[14] if len(row) > 14 else '',
                    'data_separacao': row[15] if len(row) > 15 else '',
                    'separado_por': row[16] if len(row) > 16 else ''
                }
                itens.append(item)
        
        return itens
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar itens da impress√£o {id_impressao}: {e}")
        return []

def buscar_status_impressao(id_impressao):
    """Busca o status de uma impress√£o na aba IMPRESSOES"""
    try:
        print(f"üîç Buscando status da impress√£o {id_impressao} na aba IMPRESSOES...")
        
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        impressoes_worksheet = sheet.worksheet("IMPRESSOES")
        all_values = impressoes_worksheet.get_all_values()
        
        if len(all_values) < 2:
            return {'status': 'Pendente', 'data_criacao': '', 'total_itens': 0}
        
        # Buscar a linha da impress√£o
        for row in all_values[1:]:
            if len(row) > 0 and row[0] == id_impressao:  # ID_IMPRESSAO
                print(f"‚úÖ Impress√£o {id_impressao} encontrada na aba IMPRESSOES")
                print(f"üìã Dados da linha: {row[:5]}...")
                
                # Extrair dados da impress√£o
                status = row[3] if len(row) > 3 else 'Pendente'  # STATUS (coluna D)
                data_criacao = row[1] if len(row) > 1 else ''  # DATA_IMPRESSAO (coluna B)
                total_itens = int(row[4]) if len(row) > 4 and row[4].isdigit() else 0  # TOTAL_ITENS (coluna E)
                data_processamento = row[6] if len(row) > 6 else ''  # DATA_PROCESSAMENTO (coluna G)
                
                print(f"üìä Status: {status}, Data Cria√ß√£o: {data_criacao}, Data Processamento: {data_processamento}, Total: {total_itens}")
                
                return {
                    'status': status,
                    'data_criacao': data_criacao,
                    'data_processamento': data_processamento,
                    'total_itens': total_itens
                }
        
        print(f"‚ùå Impress√£o {id_impressao} n√£o encontrada na aba IMPRESSOES")
        return {'status': 'Pendente', 'data_criacao': '', 'data_processamento': '', 'total_itens': 0}
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar status da impress√£o {id_impressao}: {e}")
        return {'status': 'Pendente', 'data_criacao': '', 'data_processamento': '', 'total_itens': 0}

def atualizar_status_impressao(id_impressao, novo_status, usuario_processamento=None):
    """Atualiza status de uma impress√£o"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        impressoes_worksheet = sheet.worksheet("IMPRESSOES")
        all_values = impressoes_worksheet.get_all_values()
        
        if len(all_values) < 2:
            return False
        
        # Encontrar a linha da impress√£o
        for i, row in enumerate(all_values[1:], start=2):
            if len(row) >= 1 and row[0] == id_impressao:
                # Atualizar status
                impressoes_worksheet.update_cell(i, 4, novo_status)  # STATUS
                
                if novo_status == 'Processado' and usuario_processamento:
                    impressoes_worksheet.update_cell(i, 6, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))  # DATA_PROCESSAMENTO
                    impressoes_worksheet.update_cell(i, 7, usuario_processamento)  # USUARIO_PROCESSAMENTO
                
                impressoes_worksheet.update_cell(i, 10, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))  # UPDATED_AT
                
                print(f"‚úÖ Status da impress√£o {id_impressao} atualizado para {novo_status}")
                return True
        
        print(f"‚ùå Impress√£o {id_impressao} n√£o encontrada")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar status da impress√£o: {e}")
        return False

def verificar_itens_em_impressao_pendente(ids_solicitacoes):
    """Verifica se algum dos IDs j√° est√° em impress√£o pendente (n√£o processada)"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        # Buscar impress√µes pendentes (apenas status "Pendente")
        impressoes_pendentes = buscar_impressoes_pendentes()
        if not impressoes_pendentes:
            return []
        
        # Buscar todos os itens de impress√µes pendentes
        itens_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
        all_values = itens_worksheet.get_all_values()
        
        if len(all_values) < 2:
            return []
        
        # IDs das impress√µes pendentes (apenas status "Pendente")
        ids_impressoes_pendentes = [imp['id_impressao'] for imp in impressoes_pendentes]
        
        # IDs de solicita√ß√µes j√° em impress√£o pendente
        ids_em_impressao = []
        
        for row in all_values[1:]:
            if len(row) >= 2:
                id_impressao = row[0]  # ID_IMPRESSAO
                id_solicitacao = row[1]  # ID_SOLICITACAO
                
                # Se est√° em impress√£o pendente (n√£o processada) e √© um dos IDs selecionados
                if id_impressao in ids_impressoes_pendentes and id_solicitacao in ids_solicitacoes:
                    ids_em_impressao.append(id_solicitacao)
        
        return ids_em_impressao
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar itens em impress√£o pendente: {e}")
        return []

def verificar_itens_em_separacao(ids_solicitacoes):
    """Verifica quais itens j√° est√£o com status 'Em Separa√ß√£o'"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            return []
        
        # Acessar a aba "Solicita√ß√µes"
        worksheet = sheet.get_worksheet(0)
        all_values = worksheet.get_all_values()
        
        if not all_values or len(all_values) < 2:
            return []
        
        # Encontrar coluna de Status
        headers = all_values[0]
        status_col = None
        
        for i, header in enumerate(headers):
            header_lower = header.lower().strip()
            if 'status' in header_lower and status_col is None:
                status_col = i
        
        if status_col is None:
            print("‚ùå Coluna Status n√£o encontrada")
            return []
        
        # Buscar itens com status "Em Separa√ß√£o" usando √≠ndice da linha como ID
        itens_em_separacao = []
        for row_num, row in enumerate(all_values[1:], start=1):
            if len(row) > status_col:
                # Usar √≠ndice da linha como ID (row_num)
                item_id = str(row_num)
                status = row[status_col].strip() if len(row) > status_col else ''
                
                if item_id in ids_solicitacoes and status == 'Em Separa√ß√£o':
                    itens_em_separacao.append(item_id)
        
        return itens_em_separacao
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar itens em separa√ß√£o: {e}")
        return []

def atualizar_status_rapido(ids_solicitacoes):
    """Atualiza status para 'Em Separa√ß√£o' de forma otimizada"""
    try:
        # Conectar com Google Sheets
        sheet = get_google_sheets_connection()
        if not sheet:
            return False
        
        # Acessar a aba "Solicita√ß√µes"
        worksheet = sheet.get_worksheet(0)
        
        # Encontrar coluna de status
        headers = worksheet.row_values(1)
        status_col = None
        
        for i, header in enumerate(headers):
            if 'status' in header.lower().strip():
                status_col = i
                break
        
        if status_col is None:
            return False
        
        # Preparar atualiza√ß√µes em lote
        updates = []
        
        # Atualizar apenas as linhas necess√°rias
        for row_id in ids_solicitacoes:
            if row_id.isdigit():
                row_num = int(row_id) + 1  # +1 porque a planilha come√ßa em 1
                status_cell = f"{chr(65 + status_col)}{row_num}"
                updates.append({
                    'range': status_cell,
                    'values': [['Em Separa√ß√£o']]
                })
        
        if updates:
            # Executar todas as atualiza√ß√µes de uma vez
            worksheet.batch_update(updates)
            
            # OTIMIZA√á√ÉO: Invalidar cache ap√≥s atualiza√ß√£o de status
            print("üîÑ Invalidando cache ap√≥s atualiza√ß√£o de status...")
            cache_manager.invalidate_sheets_data()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na atualiza√ß√£o r√°pida: {e}")
        return False

def atualizar_status_para_em_separacao_por_id(ids_solicitacoes):
    """Atualiza status para 'Em Separa√ß√£o' usando IDs √∫nicos das solicita√ß√µes"""
    try:
        # Conectar com Google Sheets
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå N√£o foi poss√≠vel conectar com Google Sheets")
            return False
        
        # Acessar a aba "Solicita√ß√µes"
        worksheet = sheet.get_worksheet(0)
        
        # Obter todos os dados uma √∫nica vez
        all_values = worksheet.get_all_values()
        if not all_values or len(all_values) < 2:
            print("‚ùå Planilha est√° vazia")
            return False
        
        # Encontrar coluna de status
        headers = all_values[0]
        status_col = None
        
        for i, header in enumerate(headers):
            header_lower = header.lower().strip()
            if 'status' in header_lower and status_col is None:
                status_col = i
        
        if status_col is None:
            print(f"‚ùå Coluna Status n√£o encontrada")
            return False
        
        # Usar √≠ndice da linha como ID (n√£o h√° coluna ID na planilha)
        print(f"üìç Usando √≠ndice da linha como ID, Status na coluna: {status_col}")
        
        print(f"üìä Atualizando status para {len(ids_solicitacoes)} IDs √∫nicos...")
        
        # Preparar atualiza√ß√µes em lote
        updates = []
        ids_encontrados = set()
        
        # Buscar linhas que precisam ser atualizadas
        for row_num, row in enumerate(all_values[1:], start=2):
            if len(row) > status_col:
                # Usar √≠ndice da linha como ID
                item_id = str(row_num - 1)  # row_num - 1 porque come√ßamos em start=2
                status_atual = row[status_col].strip() if len(row) > status_col else ''
                
                # Verificar se este ID est√° na lista e pode ser atualizado
                if item_id in ids_solicitacoes and status_atual not in ['Conclu√≠do', 'Excedido', 'Em Separa√ß√£o']:
                    status_cell_address = f"{chr(65 + status_col)}{row_num}"
                    updates.append({
                        'range': status_cell_address,
                        'values': [['Em Separa√ß√£o']]
                    })
                    ids_encontrados.add(item_id)
                    print(f"   ‚úÖ ID {item_id} ser√° atualizado (linha {row_num}) - Status atual: '{status_atual}'")
                elif item_id in ids_solicitacoes:
                    print(f"   ‚ö†Ô∏è ID {item_id} j√° tem status '{status_atual}' - n√£o ser√° atualizado")
        
        # Executar atualiza√ß√µes em lote se houver alguma
        if updates:
            try:
                worksheet.batch_update(updates)
                print(f"‚úÖ {len(updates)} status atualizados com sucesso!")
                return True
            except Exception as e:
                print(f"‚ùå Erro ao executar atualiza√ß√µes em lote: {e}")
                return False
        else:
            print("‚ö†Ô∏è Nenhuma linha encontrada para atualizar")
            return True
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar status: {e}")
        return False

def validar_selecao_impressao(ids_selecionados):
    """Valida se a sele√ß√£o pode ser impressa (n√£o h√° conflitos)"""
    try:
        # Verificar se h√° itens j√° em impress√£o pendente
        ids_em_impressao = verificar_itens_em_impressao_pendente(ids_selecionados)
        
        if ids_em_impressao:
            return {
                'valido': False,
                'mensagem': f'Os seguintes itens j√° est√£o em impress√£o pendente e n√£o podem ser reimpressos at√© serem processados: {", ".join(ids_em_impressao)}',
                'itens_conflitantes': ids_em_impressao
            }
        
        return {
            'valido': True,
            'mensagem': 'Sele√ß√£o v√°lida para impress√£o',
            'itens_conflitantes': []
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao validar sele√ß√£o: {e}")
        return {
            'valido': False,
            'mensagem': f'Erro ao validar sele√ß√£o: {str(e)}',
            'itens_conflitantes': []
        }

def atualizar_item_impressao(id_impressao, id_solicitacao, qtd_separada, observacoes=""):
    """Atualiza item da impress√£o com quantidade separada"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        itens_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
        all_values = itens_worksheet.get_all_values()
        
        if len(all_values) < 2:
            return False
        
        # Encontrar a linha do item
        for i, row in enumerate(all_values[1:], start=2):
            if len(row) >= 2 and row[0] == id_impressao and row[1] == id_solicitacao:
                # Atualizar quantidade separada (coluna 12)
                itens_worksheet.update_cell(i, 13, qtd_separada)
                
                # Atualizar observa√ß√µes (coluna 14)
                itens_worksheet.update_cell(i, 14, observacoes)
                
                # Atualizar status do item
                if qtd_separada == 0:
                    status_item = 'Pendente'
                elif qtd_separada < int(row[7]):  # qtd_separada < quantidade
                    status_item = 'Parcial'
                else:
                    status_item = 'Separado'
                
                itens_worksheet.update_cell(i, 12, status_item)
                
                # Atualizar data de separa√ß√£o
                itens_worksheet.update_cell(i, 15, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                
                # Atualizar quem separou
                itens_worksheet.update_cell(i, 16, current_user.username)
                
                print(f"‚úÖ Item {id_solicitacao} atualizado: {qtd_separada} unidades separadas")
                return True
        
        print(f"‚ùå Item {id_solicitacao} n√£o encontrado na impress√£o {id_impressao}")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar item da impress√£o: {e}")
        return False

def atualizar_solicitacao_apos_separacao(id_solicitacao, qtd_separada):
    """Atualiza status da solicita√ß√£o na aba Solicita√ß√µes ap√≥s separa√ß√£o"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        worksheet = sheet.get_worksheet(0)  # Aba Solicita√ß√µes
        all_values = worksheet.get_all_values()
        
        if len(all_values) < 2:
            return False
        
        # Encontrar a linha da solicita√ß√£o
        for i, row in enumerate(all_values[1:], start=2):
            # Procurar por ID em qualquer c√©lula da linha
            for cell in row:
                if cell.strip() == id_solicitacao:
                    # Encontrar colunas necess√°rias
                    headers = all_values[0]
                    qtd_separada_col = None
                    status_col = None
                    
                    for j, header in enumerate(headers):
                        if 'qtd. separada' in header.lower() or 'qtd separada' in header.lower():
                            qtd_separada_col = j
                        elif 'status' in header.lower():
                            status_col = j
                    
                    # Atualizar quantidade separada
                    if qtd_separada_col is not None:
                        worksheet.update_cell(i, qtd_separada_col + 1, qtd_separada)
                    
                    # Atualizar status
                    if status_col is not None:
                        if qtd_separada == 0:
                            novo_status = 'Pendente'
                        elif qtd_separada < int(row[5]) if row[5].isdigit() else 0:  # qtd_separada < quantidade
                            novo_status = 'Parcial'
                        else:
                            novo_status = 'Processada'
                        
                        worksheet.update_cell(i, status_col + 1, novo_status)
                    
                    print(f"‚úÖ Solicita√ß√£o {id_solicitacao} atualizada: {qtd_separada} unidades separadas")
                    return True
        
        print(f"‚ùå Solicita√ß√£o {id_solicitacao} n√£o encontrada na aba Solicita√ß√µes")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar solicita√ß√£o: {e}")
        return False

class MovimentacaoEstoque(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    produto_id = db.Column(db.Integer, db.ForeignKey('produto.id'), nullable=False)
    tipo = db.Column(db.String(20), nullable=False)  # entrada, saida, ajuste
    quantidade = db.Column(db.Integer, nullable=False)
    motivo = db.Column(db.String(100))
    solicitacao_id = db.Column(db.Integer, db.ForeignKey('solicitacao.id'))
    data_movimentacao = db.Column(db.DateTime, default=datetime.utcnow)
    usuario = db.Column(db.String(100))
    
    # Relacionamentos
    produto = db.relationship('Produto', backref=db.backref('movimentacoes', lazy=True))
    solicitacao = db.relationship('Solicitacao', backref=db.backref('movimentacoes', lazy=True))

class Log(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    usuario_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    usuario_nome = db.Column(db.String(80), nullable=False)
    acao = db.Column(db.String(50), nullable=False)  # login, logout, criar, editar, deletar, aprovar, etc.
    entidade = db.Column(db.String(50), nullable=False)  # Solicitacao, Produto, User, etc.
    entidade_id = db.Column(db.Integer, nullable=True)  # ID da entidade afetada
    detalhes = db.Column(db.Text, nullable=True)  # JSON com detalhes da opera√ß√£o
    ip_address = db.Column(db.String(45), nullable=True)  # Suporta IPv6
    user_agent = db.Column(db.String(500), nullable=True)
    status = db.Column(db.String(20), default='sucesso')  # sucesso, erro, aviso
    
    usuario = db.relationship('User', backref=db.backref('logs', lazy=True))
    
    def to_dict(self):
        return {
            'id': self.id,
            'timestamp': self.timestamp.isoformat() if self.timestamp else None,
            'usuario_nome': self.usuario_nome,
            'acao': self.acao,
            'entidade': self.entidade,
            'entidade_id': self.entidade_id,
            'detalhes': self.detalhes,
            'ip_address': self.ip_address,
            'status': self.status
        }

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Adicionar csrf_token ao contexto do template
@app.context_processor
def inject_csrf_token():
    from flask_wtf.csrf import generate_csrf
    return dict(csrf_token=generate_csrf)

# Classe para compatibilidade com pagina√ß√£o
class CompleteList:
    def __init__(self, items):
        self.items = items
        self.page = 1
        self.pages = 1
        self.per_page = len(items)
        self.total = len(items)
    
    def __iter__(self):
        return iter(self.items)
    
    def __len__(self):
        return len(self.items)

# Fun√ß√£o para conectar com Google Sheets
@cached_function(cache_duration=30, force_refresh_interval=15)  # Cache muito curto para dados cr√≠ticos
def get_google_sheets_connection():
    """Conecta com a planilha do Google Sheets"""
    try:
        print("üîå Tentando conectar com Google Sheets...")
        
        # Configurar credenciais
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        print("üìã Carregando credenciais...")
        
        # Tentar v√°rias formas de carregar credenciais
        creds = None
        
        # Op√ß√£o 1: Ler de vari√°vel de ambiente JSON (Cloud Run)
        service_account_info = os.environ.get('GOOGLE_SERVICE_ACCOUNT_INFO')
        if service_account_info:
            import json
            print("üìã Carregando credenciais da vari√°vel de ambiente...")
            info = json.loads(service_account_info)
            creds = Credentials.from_service_account_info(info, scopes=scope)
            print("‚úÖ Credenciais carregadas da vari√°vel de ambiente")
        
        # Op√ß√£o 2: Ler de arquivo local (desenvolvimento)
        if not creds:
            credential_file = 'sistema-consulta-produtos-2c00b5872af4.json'
            if os.path.exists(credential_file):
                print(f"üìã Carregando credenciais do arquivo: {credential_file}")
                creds = Credentials.from_service_account_file(credential_file, scopes=scope)
                print("‚úÖ Credenciais carregadas do arquivo")
            else:
                print(f"‚ùå Arquivo de credenciais n√£o encontrado: {credential_file}")
                print("‚ùå Tamb√©m n√£o encontrou GOOGLE_SERVICE_ACCOUNT_INFO na vari√°vel de ambiente")
                return None
        
        if not creds:
            print("‚ùå N√£o foi poss√≠vel carregar credenciais")
            return None
        
        print("üîê Autorizando cliente...")
        client = gspread.authorize(creds)
        print("‚úÖ Cliente autorizado")
        
        # Abrir planilha usando ID diretamente
        print("üìä Abrindo planilha...")
        sheet = client.open_by_key('1lh__GpPF_ZyCidLskYDf48aQEwv5Z8P2laelJN9aPuE')
        print("‚úÖ Planilha aberta com sucesso")
        
        # Verificar abas dispon√≠veis
        worksheets = sheet.worksheets()
        print(f"üìã Abas dispon√≠veis: {[ws.title for ws in worksheets]}")
        
        return sheet
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar com Google Sheets: {e}")
        print(f"‚ùå Tipo do erro: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        return None

def criar_aba_realizar_baixa():
    """Cria a aba 'Realizar baixa' com a estrutura especificada"""
    try:
        print("üöÄ CRIANDO ABA 'REALIZAR BAIXA'")
        
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå Erro ao conectar com Google Sheets")
            return False
        
        # Verificar se a aba j√° existe
        try:
            existing_worksheet = sheet.worksheet("Realizar baixa")
            print("‚ö†Ô∏è Aba 'Realizar baixa' j√° existe")
            return True
        except gspread.WorksheetNotFound:
            print("üìã Aba 'Realizar baixa' n√£o existe, criando...")
        
        # Criar nova aba
        worksheet = sheet.add_worksheet(title="Realizar baixa", rows=1000, cols=20)
        
        # Definir cabe√ßalhos conforme especificado
        headers = [
            "Carimbo",           # A - Data/hora da baixa
            "Cod",               # B - C√≥digo do produto
            "Data",              # C - Data da solicita√ß√£o
            "Qtd",               # D - Quantidade separada
            "Responsavel",       # E - Usu√°rio que processou
            "Solicitante",       # F - Solicitante
            "ID_IMPRESSAO"       # G - ID do romaneio para busca
        ]
        
        # Adicionar cabe√ßalhos
        worksheet.update('A1:G1', [headers])
        
        # Formatar cabe√ßalhos (negrito)
        worksheet.format('A1:G1', {
            'textFormat': {'bold': True},
            'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9}
        })
        
        # Ajustar largura das colunas
        worksheet.format('A:G', {
            'columnWidth': 120
        })
        
        print("‚úÖ Aba 'Realizar baixa' criada com sucesso!")
        print(f"üìã Cabe√ßalhos: {headers}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar aba 'Realizar baixa': {e}")
        return False

def salvar_dados_realizar_baixa(id_romaneio, itens_processados, usuario_processamento):
    """Salva dados do processamento na aba 'Realizar baixa'"""
    try:
        print(f"üöÄ SALVANDO DADOS NA ABA 'REALIZAR BAIXA'")
        print(f"üì¶ Romaneio: {id_romaneio}")
        print(f"üìã Itens processados: {len(itens_processados)}")
        print(f"üë§ Usu√°rio: {usuario_processamento}")
        
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå Erro ao conectar com Google Sheets")
            return False
        
        # Verificar se a aba existe, se n√£o existir, criar
        try:
            worksheet = sheet.worksheet("Realizar baixa")
        except gspread.WorksheetNotFound:
            print("üìã Aba 'Realizar baixa' n√£o existe, criando...")
            if not criar_aba_realizar_baixa():
                return False
            worksheet = sheet.worksheet("Realizar baixa")
        
        # Buscar dados das solicita√ß√µes para obter informa√ß√µes completas
        solicitacoes_worksheet = sheet.worksheet("Solicita√ß√µes")
        solicitacoes_values = solicitacoes_worksheet.get_all_values()
        
        if len(solicitacoes_values) < 2:
            print("‚ùå Aba Solicita√ß√µes vazia")
            return False
        
        # Encontrar colunas necess√°rias
        header_solicitacoes = solicitacoes_values[0]
        col_indices = {}
        for i, col_name in enumerate(header_solicitacoes):
            col_name_clean = col_name.strip().upper()
            print(f"   Coluna {i}: '{col_name_clean}'")
            if 'COD=' in col_name_clean or 'CODIGO' in col_name_clean:
                col_indices['codigo'] = i
            elif 'SOLICITANTE' in col_name_clean:
                col_indices['solicitante'] = i
            elif 'DATA' in col_name_clean and 'CARIMBO' not in col_name_clean:
                col_indices['data'] = i
        
        print(f"üìç Colunas encontradas: {col_indices}")
        print(f"üìã Header completo: {header_solicitacoes}")
        
        # CORRE√á√ÉO: Buscar tamb√©m na aba IMPRESSAO_ITENS para dados mais completos
        impressao_itens_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
        impressao_itens_values = impressao_itens_worksheet.get_all_values()
        print(f"üìä Total de linhas na IMPRESSAO_ITENS: {len(impressao_itens_values)}")
        
        # Preparar dados para inser√ß√£o
        data_processamento = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        dados_para_inserir = []
        
        for item in itens_processados:
            id_solicitacao = item.get('id_solicitacao', '')
            qtd_separada = item.get('qtd_separada', 0)
            
            print(f"üîÑ Processando item: {id_solicitacao} - Qtd: {qtd_separada}")
            
            # CORRE√á√ÉO: Buscar dados primeiro na IMPRESSAO_ITENS (mais confi√°vel)
            codigo = ''
            solicitante = ''
            data_solicitacao = ''
            
            print(f"   üîç Buscando dados na IMPRESSAO_ITENS para ID_SOLICITACAO: {id_solicitacao}")
            encontrado_impressao = False
            
            for row in impressao_itens_values[1:]:
                if len(row) > 1 and row[1] == id_solicitacao:  # ID_SOLICITACAO na coluna B
                    codigo = row[4] if len(row) > 4 else ''  # CODIGO na coluna E
                    solicitante = row[3] if len(row) > 3 else ''  # SOLICITANTE na coluna D
                    data_solicitacao = row[2] if len(row) > 2 else ''  # DATA na coluna C
                    print(f"   ‚úÖ Dados encontrados na IMPRESSAO_ITENS: Cod='{codigo}', Sol='{solicitante}', Data='{data_solicitacao}'")
                    encontrado_impressao = True
                    break
            
            # Se n√£o encontrou na IMPRESSAO_ITENS, buscar na aba Solicita√ß√µes
            if not encontrado_impressao:
                print(f"   üîÑ Buscando dados na aba Solicita√ß√µes para ID_SOLICITACAO: {id_solicitacao}")
                encontrado_solicitacoes = False
                
                for i, row in enumerate(solicitacoes_values[1:], start=2):
                    if len(row) > 15 and row[15] == id_solicitacao:  # ID_SOLICITACAO na coluna P
                        print(f"   ‚úÖ Solicita√ß√£o encontrada na linha {i}")
                        print(f"   üìã Dados da linha: {row[:5]}...")
                        
                        codigo = row[col_indices['codigo']] if 'codigo' in col_indices and len(row) > col_indices['codigo'] else ''
                        solicitante = row[col_indices['solicitante']] if 'solicitante' in col_indices and len(row) > col_indices['solicitante'] else ''
                        data_solicitacao = row[col_indices['data']] if 'data' in col_indices and len(row) > col_indices['data'] else ''
                        
                        print(f"   üìä C√≥digo: '{codigo}', Solicitante: '{solicitante}', Data: '{data_solicitacao}'")
                        encontrado_solicitacoes = True
                        break
                
                if not encontrado_solicitacoes:
                    print(f"   ‚ùå Solicita√ß√£o {id_solicitacao} n√£o encontrada em nenhuma aba!")
                    # Usar dados b√°sicos do item processado
                    codigo = item.get('codigo', '')
                    solicitante = item.get('solicitante', '')
                    data_solicitacao = item.get('data', '')
            
            # Adicionar linha de dados
            linha_dados = [
                data_processamento,    # A - Carimbo
                codigo,               # B - Cod
                data_solicitacao,     # C - Data
                str(qtd_separada),    # D - Qtd
                usuario_processamento, # E - Responsavel
                solicitante,          # F - Solicitante
                id_romaneio           # G - ID_IMPRESSAO
            ]
            
            dados_para_inserir.append(linha_dados)
            print(f"   ‚úÖ Dados preparados: {linha_dados}")
        
        # Inserir dados na aba
        if dados_para_inserir:
            # Encontrar pr√≥xima linha vazia
            all_values = worksheet.get_all_values()
            proxima_linha = len(all_values) + 1
            
            # Inserir dados
            range_start = f'A{proxima_linha}'
            range_end = f'G{proxima_linha + len(dados_para_inserir) - 1}'
            worksheet.update(f'{range_start}:{range_end}', dados_para_inserir)
            
            print(f"‚úÖ {len(dados_para_inserir)} registros salvos na aba 'Realizar baixa'")
            print(f"üìç Range: {range_start}:{range_end}")
            return True
        else:
            print("‚ö†Ô∏è Nenhum dado para inserir na aba 'Realizar baixa'")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro ao salvar dados na aba 'Realizar baixa': {e}")
        return False

# Fun√ß√£o para consultar planilha do Google Sheets em tempo real
@cached_function(cache_duration=30, force_refresh_interval=15)  # Cache curto para dados que mudam frequentemente
def get_google_sheets_data():
    """Consulta dados da planilha do Google Sheets em tempo real usando API"""
    try:
        # Conectar com Google Sheets usando API
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå N√£o foi poss√≠vel conectar com Google Sheets API")
            return None
        
        # Acessar a primeira aba (√≠ndice 0) - Solicita√ß√µes
        worksheet = sheet.get_worksheet(0)
        
        # Obter todos os valores da planilha
        print("üì• Consultando planilha via API...")
        all_values = worksheet.get_all_values()
        
        if not all_values:
            print("‚ùå Planilha est√° vazia")
            return None
        
        # Converter para DataFrame
        df = pd.DataFrame(all_values[1:], columns=all_values[0])  # Primeira linha como cabe√ßalho
        
        # Filtrar apenas linhas que t√™m dados reais (n√£o vazias)
        df = df.dropna(how='all')  # Remove linhas completamente vazias
        # Filtrar apenas linhas que t√™m c√≥digo E solicitante (dados reais)
        df = df[
            df['C√≥digo'].notna() & (df['C√≥digo'] != '') & 
            df['Solicitante'].notna() & (df['Solicitante'] != '')
        ]
        
        # Verificar se o DataFrame n√£o est√° vazio
        if df.empty:
            print("‚ùå Planilha est√° vazia ap√≥s filtrar dados v√°lidos")
            return None
        
        print(f"‚úÖ Dados obtidos via API: {len(df)} registros")
        return df
        
    except Exception as e:
        print(f"‚ùå Erro ao consultar planilha via API: {e}")
        return None

# Fun√ß√£o para buscar dados da matriz diretamente do Google Sheets
def get_matriz_data_from_sheets():
    """Busca dados da aba MATRIZ_IMPORTADA diretamente do Google Sheets"""
    try:
        # Conectar com Google Sheets
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå N√£o foi poss√≠vel conectar com Google Sheets")
            return {}
        
        # Acessar a aba MATRIZ_IMPORTADA (√≠ndice 5)
        try:
            worksheet = sheet.get_worksheet(5)  # Sexta aba
        except gspread.WorksheetNotFound:
            print("‚ùå Aba 'MATRIZ_IMPORTADA' n√£o encontrada")
            return {}
        
        # Obter todos os valores da planilha
        print("üì• Consultando dados da aba MATRIZ_IMPORTADA...")
        all_values = worksheet.get_all_values()
        
        if not all_values or len(all_values) < 2:
            print("‚ùå Aba MATRIZ_IMPORTADA est√° vazia")
            return {}
        
        # Converter para DataFrame
        df = pd.DataFrame(all_values[1:], columns=all_values[0])
        
        # Filtrar apenas linhas com dados v√°lidos
        df = df.dropna(how='all')
        # Verificar se a coluna COD existe
        if 'COD' in df.columns:
            df = df[df['COD'].notna() & (df['COD'] != '')]
        else:
            print("‚ö†Ô∏è Coluna 'COD' n√£o encontrada. Verificando colunas dispon√≠veis...")
            print(f"Colunas encontradas: {list(df.columns)}")
            # Tentar encontrar coluna similar
            cod_columns = [col for col in df.columns if 'cod' in col.lower()]
            if cod_columns:
                cod_col = cod_columns[0]
                print(f"Usando coluna '{cod_col}' como c√≥digo")
                df = df[df[cod_col].notna() & (df[cod_col] != '')]
            else:
                print("‚ùå Nenhuma coluna de c√≥digo encontrada")
                return {}
        
        if df.empty:
            print("‚ùå Nenhum dado v√°lido encontrado na aba MATRIZ_IMPORTADA")
            return {}
        
        print(f"üìä Processando {len(df)} registros da aba MATRIZ_IMPORTADA...")
        
        # Criar dicion√°rio com dados da matriz
        matriz_data = {}
        
        # Usar a coluna de c√≥digo encontrada
        cod_col = 'COD' if 'COD' in df.columns else cod_columns[0] if 'cod_columns' in locals() and cod_columns else None
        
        if not cod_col:
            print("‚ùå Nenhuma coluna de c√≥digo v√°lida encontrada")
            return {}
        
        for index, row in df.iterrows():
            try:
                codigo = str(row.get(cod_col, '')).strip()
                if not codigo:
                    continue
                
                # Criar objeto com dados da matriz
                matriz_item = {
                    'codigo': codigo,
                    'descricao': str(row.get('DESCRICAO COMPLETA', '')).strip() if pd.notna(row.get('DESCRICAO COMPLETA', '')) else '',
                    'unidade': str(row.get('UNIDADE MEDIDA', '')).strip() if pd.notna(row.get('UNIDADE MEDIDA', '')) else '',
                    'locacao_matriz': str(row.get('LOCACAO', '')).strip() if pd.notna(row.get('LOCACAO', '')) else '',
                    'saldo_estoque': 0,
                    'media_mensal': 0.0
                }
                
                # Processar saldo de estoque
                try:
                    saldo_str = str(row.get('SALDO ESTOQUE', '')).strip()
                    if saldo_str and saldo_str != '':
                        # Converter v√≠rgula para ponto (formato brasileiro)
                        saldo_str = saldo_str.replace(',', '.')
                        matriz_item['saldo_estoque'] = int(float(saldo_str))
                    else:
                        matriz_item['saldo_estoque'] = 0
                except (ValueError, TypeError):
                    matriz_item['saldo_estoque'] = 0
                
                # Processar m√©dia mensal
                try:
                    media_str = str(row.get('MEDIA MENSAL', '')).strip()
                    if media_str and media_str != '':
                        # Converter v√≠rgula para ponto (formato brasileiro)
                        media_str = media_str.replace(',', '.')
                        media_original = float(media_str)
                        # Dividir por 2 e arredondar para cima
                        matriz_item['media_mensal'] = math.ceil(media_original / 2)
                    else:
                        matriz_item['media_mensal'] = 0
                except (ValueError, TypeError):
                    matriz_item['media_mensal'] = 0
                
                # Adicionar ao dicion√°rio
                matriz_data[codigo] = matriz_item
                
            except Exception as e:
                print(f"‚ùå Erro ao processar linha {index + 2}: {e}")
                continue
        
        print(f"‚úÖ {len(matriz_data)} registros da matriz carregados do Google Sheets!")
        return matriz_data
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar dados da aba MATRIZ_IMPORTADA: {e}")
        return {}

# Fun√ß√£o para salvar log na planilha do Google Sheets
def save_log_to_sheets(acao, entidade, entidade_id=None, detalhes=None, status='sucesso'):
    """Salva log diretamente na planilha do Google Sheets"""
    try:
        # Conectar com a planilha
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå N√£o foi poss√≠vel conectar com a planilha para salvar log")
            return False
        
        # Acessar a aba "Logs"
        try:
            logs_worksheet = sheet.worksheet("Logs")
        except gspread.WorksheetNotFound:
            # Criar aba "Logs" se n√£o existir
            logs_worksheet = sheet.add_worksheet(title="Logs", rows=1000, cols=10)
            
            # Adicionar cabe√ßalhos
            headers = [
                "ID", "Data/Hora", "Usu√°rio", "A√ß√£o", "Entidade", 
                "ID_Entidade", "Detalhes", "IP_Address", "User_Agent", "Status"
            ]
            logs_worksheet.append_row(headers)
            print("‚úÖ Aba 'Logs' criada com cabe√ßalhos")
        
        # Obter pr√≥ximo ID
        try:
            all_records = logs_worksheet.get_all_records()
            next_id = len(all_records) + 1
        except:
            next_id = 1
        
        # Preparar dados do log
        log_data = [
            next_id,
            datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
            current_user.username if current_user.is_authenticated else 'Sistema',
            acao,
            entidade,
            entidade_id or '',
            detalhes or '',
            request.remote_addr if hasattr(request, 'remote_addr') else '',
            request.headers.get('User-Agent', '') if hasattr(request, 'headers') else '',
            status
        ]
        
        # Adicionar linha na planilha
        logs_worksheet.append_row(log_data)
        print(f"‚úÖ Log salvo na planilha: {acao} - {entidade}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao salvar log na planilha: {e}")
        return False

# Fun√ß√£o para ler logs da planilha do Google Sheets
def get_logs_from_sheets():
    """L√™ logs da planilha do Google Sheets"""
    try:
        # Conectar com a planilha
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå N√£o foi poss√≠vel conectar com a planilha para ler logs")
            return []
        
        # Acessar a aba "Logs"
        try:
            logs_worksheet = sheet.worksheet("Logs")
        except gspread.WorksheetNotFound:
            print("‚ùå Aba 'Logs' n√£o encontrada na planilha")
            return []
        
        # Obter todos os registros
        all_records = logs_worksheet.get_all_records()
        
        # Converter para objetos de log
        logs = []
        for record in all_records:
            if record.get('ID'):  # Pular linha de cabe√ßalho
                log_obj = type('Log', (), {})()
                log_obj.id = record.get('ID', '')
                log_obj.timestamp = record.get('Data/Hora', '')
                log_obj.usuario_nome = record.get('Usu√°rio', '')
                log_obj.acao = record.get('A√ß√£o', '')
                log_obj.entidade = record.get('Entidade', '')
                log_obj.entidade_id = record.get('ID_Entidade', '')
                log_obj.detalhes = record.get('Detalhes', '')
                log_obj.ip_address = record.get('IP_Address', '')
                log_obj.user_agent = record.get('User_Agent', '')
                log_obj.status = record.get('Status', '')
                logs.append(log_obj)
        
        print(f"‚úÖ {len(logs)} logs lidos da planilha")
        return logs
        
    except Exception as e:
        print(f"‚ùå Erro ao ler logs da planilha: {e}")
        return []

# Fun√ß√£o utilit√°ria para logging (mantida para compatibilidade)
def log_activity(acao, entidade, entidade_id=None, detalhes=None, status='sucesso'):
    """Registra uma atividade no log do sistema"""
    try:
        # Salvar na planilha do Google Sheets
        success = save_log_to_sheets(acao, entidade, entidade_id, detalhes, status)
        
        # Fallback: salvar no banco local se a planilha falhar
        if not success and current_user.is_authenticated:
            log = Log(
                usuario_id=current_user.id,
                usuario_nome=current_user.username,
                acao=acao,
                entidade=entidade,
                entidade_id=entidade_id,
                detalhes=detalhes,
                ip_address=request.remote_addr,
                user_agent=request.headers.get('User-Agent'),
                status=status
            )
            db.session.add(log)
            db.session.commit()
            print("‚úÖ Log salvo no banco local (fallback)")
    except Exception as e:
        print(f"‚ùå Erro ao registrar log: {e}")
        # N√£o falha a opera√ß√£o principal se o log falhar

# Rotas principais
@app.route('/')
@login_required
def index():
    try:
        print("üöÄ Iniciando carregamento do dashboard...")
        
        # Obter dados das solicita√ß√µes do Google Sheets
        print("üìä Buscando dados das solicita√ß√µes...")
        solicitacoes_data = get_google_sheets_data()
        
        if solicitacoes_data is None:
            print("‚ùå Erro: solicitacoes_data √© None")
            raise Exception("N√£o foi poss√≠vel obter dados das solicita√ß√µes")
        
        if isinstance(solicitacoes_data, pd.DataFrame):
            print(f"‚úÖ DataFrame obtido com {len(solicitacoes_data)} linhas")
            print(f"üìã Colunas dispon√≠veis: {list(solicitacoes_data.columns)}")
            
            # Converter DataFrame para lista de dicion√°rios
            solicitacoes_data = solicitacoes_data.to_dict('records')
            print(f"üîÑ Convertido para {len(solicitacoes_data)} registros")
        else:
            print(f"‚úÖ Lista obtida com {len(solicitacoes_data)} registros")
        
        # Contar por status com debug
        total_solicitacoes = len(solicitacoes_data)
        print(f"üìä Total de solicita√ß√µes encontradas: {total_solicitacoes}")
        
        if total_solicitacoes == 0:
            print("‚ö†Ô∏è ATEN√á√ÉO: Nenhuma solicita√ß√£o encontrada!")
            print("üîç Verificando se h√° dados na planilha...")
            # Tentar buscar dados brutos para debug
            try:
                sheet = get_google_sheets_connection()
                if sheet:
                    worksheet = sheet.get_worksheet(0)
                    raw_data = worksheet.get_all_values()
                    print(f"üìã Dados brutos da planilha: {len(raw_data)} linhas")
                    if len(raw_data) > 0:
                        print(f"üìã Primeira linha (cabe√ßalho): {raw_data[0]}")
                        if len(raw_data) > 1:
                            print(f"üìã Segunda linha (primeiro dado): {raw_data[1]}")
            except Exception as debug_e:
                print(f"‚ùå Erro no debug: {debug_e}")
        
        # Detectar status de forma mais robusta
        solicitacoes_abertas = 0
        solicitacoes_em_separacao = 0
        solicitacoes_concluidas = 0
        
        for i, s in enumerate(solicitacoes_data):
            status = str(s.get('status', '')).lower().strip()
            if i < 3:  # Log apenas os primeiros 3 para n√£o poluir
                print(f"üîç Registro {i+1} - Status: '{status}'")
            
            if status in ['aberta', 'aberto', 'pendente', 'nova', '']:
                solicitacoes_abertas += 1
            elif status in ['em separa√ß√£o', 'em_separacao', 'em separacao', 'separando', 'parcial']:
                solicitacoes_em_separacao += 1
            elif status in ['concluida', 'conclu√≠do', 'concluido', 'finalizada', 'entregue', 'conclu√≠da']:
                solicitacoes_concluidas += 1
        
        print(f"üìà Contagem por status - Abertas: {solicitacoes_abertas}, Em Separa√ß√£o: {solicitacoes_em_separacao}, Conclu√≠das: {solicitacoes_concluidas}")
        
        # Obter dados da matriz
        matriz_data = get_matriz_data_from_sheets()
        total_produtos = len(matriz_data) if matriz_data else 0
        
        # Calcular solicita√ß√µes de hoje (data atual)
        hoje = datetime.now().strftime('%d/%m/%Y')
        solicitacoes_hoje = 0
        total_itens_hoje = 0
        
        for s in solicitacoes_data:
            data_solicitacao = s.get('data', '')
            if data_solicitacao:
                try:
                    if isinstance(data_solicitacao, str):
                        # Tentar diferentes formatos
                        if '/' in data_solicitacao:
                            # Formato DD/MM/YYYY ou DD/MM/YYYY HH:MM
                            data_parte = data_solicitacao.split(' ')[0]  # Remove hora se existir
                            if data_parte == hoje:
                                solicitacoes_hoje += 1
                                quantidade = int(s.get('quantidade', 0))
                                total_itens_hoje += quantidade
                        elif '-' in data_solicitacao:
                            # Formato YYYY-MM-DD
                            data_obj = datetime.strptime(data_solicitacao.split(' ')[0], '%Y-%m-%d')
                            if data_obj.strftime('%d/%m/%Y') == hoje:
                                solicitacoes_hoje += 1
                                quantidade = int(s.get('quantidade', 0))
                                total_itens_hoje += quantidade
                except:
                    continue
        
        # Calcular produtos em baixo estoque (estoque < 10)
        produtos_baixo_estoque = 0
        if matriz_data:
            for produto in matriz_data:
                try:
                    estoque = int(produto.get('saldo_estoque', 0))
                    if estoque < 10:
                        produtos_baixo_estoque += 1
                except:
                    continue
        
        stats = {
            'total_solicitacoes': total_solicitacoes,
            'solicitacoes_abertas': solicitacoes_abertas,
            'solicitacoes_em_separacao': solicitacoes_em_separacao,
            'solicitacoes_concluidas': solicitacoes_concluidas,
            'total_produtos': total_produtos,
            'solicitacoes_hoje': solicitacoes_hoje,
            'produtos_baixo_estoque': produtos_baixo_estoque,
            'total_itens_hoje': total_itens_hoje,
            'ultima_atualizacao': datetime.now().strftime('%d/%m/%Y %H:%M')
        }
        
        return render_template('index.html', stats=stats)
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar dashboard: {e}")
        # Fallback com dados b√°sicos
        stats = {
            'total_solicitacoes': 0,
            'solicitacoes_abertas': 0,
            'solicitacoes_em_separacao': 0,
            'solicitacoes_concluidas': 0,
            'total_produtos': 0,
            'solicitacoes_hoje': 0,
            'produtos_baixo_estoque': 0,
            'total_itens_hoje': 0,
            'ultima_atualizacao': datetime.now().strftime('%d/%m/%Y %H:%M')
        }
        return render_template('index.html', stats=stats)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        
        if user and user.check_password(password):
            login_user(user)
            log_activity('login', 'User', user.id, f'Login realizado com sucesso', 'sucesso')
            return redirect(url_for('index'))
        else:
            log_activity('login', 'User', None, f'Tentativa de login falhada para usu√°rio: {username}', 'erro')
            flash('Usu√°rio ou senha inv√°lidos', 'error')
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    log_activity('logout', 'User', current_user.id, f'Logout realizado', 'sucesso')
    logout_user()
    return redirect(url_for('login'))

@app.route('/usuarios')
@login_required
def listar_usuarios():
    """Lista todos os usu√°rios do sistema"""
    if not current_user.is_admin:
        flash('Apenas administradores podem acessar esta p√°gina', 'error')
        return redirect(url_for('index'))
    
    usuarios = User.query.all()
    return render_template('listar_usuarios.html', usuarios=usuarios)

@app.route('/criar-usuario', methods=['POST'])
@login_required
def criar_usuario():
    """Cria um novo usu√°rio"""
    if not current_user.is_admin:
        flash('Apenas administradores podem criar usu√°rios', 'error')
        return redirect(url_for('listar_usuarios'))
    
    try:
        username = request.form.get('username')
        email = request.form.get('email')
        password = request.form.get('password')
        is_admin = request.form.get('is_admin') == '1'
        
        # Validar dados
        if not username or not email or not password:
            flash('Todos os campos s√£o obrigat√≥rios', 'error')
            return redirect(url_for('listar_usuarios'))
        
        if len(password) < 6:
            flash('A senha deve ter no m√≠nimo 6 caracteres', 'error')
            return redirect(url_for('listar_usuarios'))
        
        # Verificar se usu√°rio j√° existe
        if User.query.filter_by(username=username).first():
            flash('Usu√°rio j√° existe', 'error')
            return redirect(url_for('listar_usuarios'))
        
        if User.query.filter_by(email=email).first():
            flash('Email j√° cadastrado', 'error')
            return redirect(url_for('listar_usuarios'))
        
        # Criar novo usu√°rio
        novo_usuario = User(
            username=username,
            email=email,
            is_admin=is_admin
        )
        novo_usuario.set_password(password)
        
        db.session.add(novo_usuario)
        db.session.commit()
        
        log_activity('criar_usuario', 'User', current_user.id, f'Usu√°rio criado: {username}', 'sucesso')
        
        flash(f'‚úÖ Usu√°rio {username} criado com sucesso!', 'success')
        return redirect(url_for('listar_usuarios'))
        
    except Exception as e:
        print(f"‚ùå Erro ao criar usu√°rio: {e}")
        flash('Erro ao criar usu√°rio', 'error')
        return redirect(url_for('listar_usuarios'))

@app.route('/desativar-usuario', methods=['POST'])
@login_required
def desativar_usuario():
    """Desativa ou ativa um usu√°rio"""
    if not current_user.is_admin:
        flash('Apenas administradores podem gerenciar usu√°rios', 'error')
        return redirect(url_for('listar_usuarios'))
    
    try:
        user_id = request.form.get('user_id')
        action = request.form.get('action')  # 'desativar' ou 'ativar'
        
        if not user_id:
            flash('ID do usu√°rio n√£o fornecido', 'error')
            return redirect(url_for('listar_usuarios'))
        
        usuario = User.query.get(user_id)
        
        if not usuario:
            flash('Usu√°rio n√£o encontrado', 'error')
            return redirect(url_for('listar_usuarios'))
        
        # N√£o permitir desativar a si mesmo
        if usuario.id == current_user.id and action == 'desativar':
            flash('Voc√™ n√£o pode desativar a si mesmo', 'error')
            return redirect(url_for('listar_usuarios'))
        
        username = usuario.username
        
        # Desativar ou ativar
        if action == 'desativar':
            usuario.is_active = False
            log_activity('desativar_usuario', 'User', current_user.id, f'Usu√°rio desativado: {username}', 'sucesso')
            flash(f'‚úÖ Usu√°rio {username} desativado com sucesso!', 'success')
        else:
            usuario.is_active = True
            log_activity('ativar_usuario', 'User', current_user.id, f'Usu√°rio ativado: {username}', 'sucesso')
            flash(f'‚úÖ Usu√°rio {username} ativado com sucesso!', 'success')
        
        db.session.commit()
        return redirect(url_for('listar_usuarios'))
        
    except Exception as e:
        print(f"‚ùå Erro ao gerenciar usu√°rio: {e}")
        flash('Erro ao gerenciar usu√°rio', 'error')
        return redirect(url_for('listar_usuarios'))

@app.route('/editar-email-usuario', methods=['POST'])
@login_required
def editar_email_usuario():
    """Permite ao admin alterar o email de qualquer usu√°rio"""
    print("üìß Requisi√ß√£o de editar email recebida")
    if not current_user.is_admin:
        flash('Apenas administradores podem editar emails', 'error')
        return redirect(url_for('listar_usuarios'))
    
    try:
        user_id = request.form.get('user_id')
        novo_email = request.form.get('novo_email')
        
        print(f"üìß user_id: {user_id}, novo_email: {novo_email}")
        
        if not user_id or not novo_email:
            flash('Dados incompletos', 'error')
            return redirect(url_for('listar_usuarios'))
        
        usuario = User.query.get(user_id)
        if not usuario:
            flash('Usu√°rio n√£o encontrado', 'error')
            return redirect(url_for('listar_usuarios'))
        
        # Verificar se email j√° existe em outro usu√°rio
        if User.query.filter(User.email == novo_email, User.id != user_id).first():
            flash('Este email j√° est√° em uso por outro usu√°rio', 'error')
            return redirect(url_for('listar_usuarios'))
        
        email_antigo = usuario.email
        usuario.email = novo_email
        db.session.commit()
        
        log_activity('editar_email_usuario', 'User', current_user.id, 
                    f'Email do usu√°rio {usuario.username} alterado de {email_antigo} para {novo_email}', 'sucesso')
        
        print(f"‚úÖ Email alterado com sucesso!")
        flash(f'‚úÖ Email do usu√°rio {usuario.username} alterado com sucesso!', 'success')
        return redirect(url_for('listar_usuarios'))
        
    except Exception as e:
        print(f"‚ùå Erro ao editar email: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao editar email', 'error')
        return redirect(url_for('listar_usuarios'))

@app.route('/alterar-senha-usuario-admin', methods=['POST'])
@login_required
def alterar_senha_usuario_admin():
    """Permite ao admin alterar a senha de qualquer usu√°rio"""
    print("üîë Requisi√ß√£o de alterar senha recebida")
    if not current_user.is_admin:
        flash('Apenas administradores podem alterar senhas', 'error')
        return redirect(url_for('listar_usuarios'))
    
    try:
        user_id = request.form.get('user_id')
        nova_senha = request.form.get('nova_senha')
        confirmar_senha = request.form.get('confirmar_senha')
        
        print(f"üîë user_id: {user_id}, senhas recebidas: {bool(nova_senha)}")
        
        if not user_id or not nova_senha or not confirmar_senha:
            flash('Dados incompletos', 'error')
            return redirect(url_for('listar_usuarios'))
        
        if nova_senha != confirmar_senha:
            flash('As senhas n√£o coincidem', 'error')
            return redirect(url_for('listar_usuarios'))
        
        if len(nova_senha) < 6:
            flash('A senha deve ter no m√≠nimo 6 caracteres', 'error')
            return redirect(url_for('listar_usuarios'))
        
        usuario = User.query.get(user_id)
        if not usuario:
            flash('Usu√°rio n√£o encontrado', 'error')
            return redirect(url_for('listar_usuarios'))
        
        username = usuario.username
        usuario.set_password(nova_senha)
        db.session.commit()
        
        log_activity('alterar_senha_admin', 'User', current_user.id, 
                    f'Senha do usu√°rio {username} alterada pelo admin', 'sucesso')
        
        print(f"‚úÖ Senha alterada com sucesso!")
        flash(f'‚úÖ Senha do usu√°rio {username} alterada com sucesso!', 'success')
        return redirect(url_for('listar_usuarios'))
        
    except Exception as e:
        print(f"‚ùå Erro ao alterar senha: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao alterar senha', 'error')
        return redirect(url_for('listar_usuarios'))

@app.route('/alterar-senha', methods=['GET', 'POST'])
@login_required
def alterar_senha():
    """Permite ao usu√°rio alterar sua pr√≥pria senha"""
    print(f"üîÑ Requisi√ß√£o recebida: {request.method}")
    if request.method == 'POST':
        try:
            print(f"üìã Dados recebidos do formul√°rio")
            current_password = request.form.get('current_password')
            new_password = request.form.get('new_password')
            confirm_password = request.form.get('confirm_password')
            
            print(f"üë§ Usu√°rio: {current_user.username}")
            print(f"üîë Senha atual recebida: {'Sim' if current_password else 'N√£o'}")
            print(f"üîë Nova senha recebida: {'Sim' if new_password else 'N√£o'}")
            
            # Validar senha atual
            print(f"üîç Verificando senha atual...")
            if not current_user.check_password(current_password):
                print(f"‚ùå Senha atual incorreta!")
                flash('‚ùå Senha atual incorreta!', 'error')
                return render_template('alterar_senha.html')
            print(f"‚úÖ Senha atual correta!")
            
            # Validar nova senha
            if len(new_password) < 6:
                print(f"‚ùå Senha muito curta!")
                flash('‚ùå A nova senha deve ter no m√≠nimo 6 caracteres!', 'error')
                return render_template('alterar_senha.html')
            
            # Verificar se senhas coincidem
            if new_password != confirm_password:
                print(f"‚ùå Senhas n√£o coincidem!")
                flash('‚ùå As senhas n√£o coincidem!', 'error')
                return render_template('alterar_senha.html')
            
            # Verificar se nova senha √© diferente da atual
            if current_user.check_password(new_password):
                print(f"‚ùå Nova senha igual √† atual!")
                flash('‚ùå A nova senha deve ser diferente da senha atual!', 'error')
                return render_template('alterar_senha.html')
            
            # Alterar senha
            print(f"üíæ Alterando senha no banco de dados...")
            current_user.set_password(new_password)
            db.session.commit()
            print(f"‚úÖ Senha alterada com sucesso!")
            
            # Registrar no log
            log_activity('alterar_senha', 'User', current_user.id, f'Senha alterada com sucesso', 'sucesso')
            
            flash('‚úÖ Senha alterada com sucesso!', 'success')
            return redirect(url_for('index'))
            
        except Exception as e:
            print(f"‚ùå Erro ao alterar senha: {e}")
            flash('‚ùå Erro ao alterar senha. Tente novamente.', 'error')
            return render_template('alterar_senha.html')
    
    return render_template('alterar_senha.html')

@app.route('/api/pdf-status/<id_impressao>')
@login_required
def verificar_status_pdf(id_impressao):
    """Verifica o status da gera√ß√£o do PDF"""
    try:
        status = pdf_generation_status.get(id_impressao, {
            'status': 'nao_iniciado',
            'progresso': 0
        })
        
        return jsonify({
            'success': True,
            'status': status
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500

@app.route('/api/limpar-cache')
@login_required
def limpar_cache():
    """Limpa o cache do sistema"""
    try:
        cache_manager.clear()
        pdf_generation_status.clear()
        return jsonify({
            'success': True,
            'message': 'Cache limpo com sucesso'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500

@app.route('/api/invalidar-cache-sheets')
@login_required
def invalidar_cache_sheets():
    """Invalida apenas o cache do Google Sheets (mant√©m outros caches)"""
    try:
        cache_manager.invalidate_sheets_data()
        return jsonify({
            'success': True,
            'message': 'Cache do Google Sheets invalidado com sucesso'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500

@app.route('/api/forcar-atualizacao')
@login_required
def forcar_atualizacao():
    """For√ßa atualiza√ß√£o de todos os dados do Google Sheets"""
    try:
        cache_manager.invalidate_sheets_data()
        # For√ßar refresh imediato
        cache_manager.last_sheets_update.clear()
        return jsonify({
            'success': True,
            'message': 'Atualiza√ß√£o for√ßada - pr√≥ximas consultas buscar√£o dados frescos'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500

# Se√ß√£o de produtos removida

# Funcionalidade de cria√ß√£o de produtos removida

# Fun√ß√£o para processar dados da planilha
def process_google_sheets_data(df, matriz_data=None):
    """Processa dados da planilha do Google Sheets"""
    solicitacoes_list = []
    
    # Buscar dados da matriz do Google Sheets (opcional)
    print("üìä Carregando dados da matriz...")
    try:
        matriz_data = get_matriz_data_from_sheets()
        print(f"üìä Matriz carregada: {len(matriz_data)} itens")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao carregar matriz: {e}")
        print("üìä Continuando sem dados da matriz...")
        matriz_data = {}
    
    for index, row in df.iterrows():
        try:
            # Criar objeto Solicitacao a partir da planilha
            solicitacao = type('Solicitacao', (), {})()
            solicitacao.id = index + 1
            
            # Processar data com tratamento de erro
            try:
                if 'Data' in row and pd.notna(row.get('Data', '')) and str(row.get('Data', '')).strip() != '':
                    solicitacao.data = pd.to_datetime(row.get('Data', ''), errors='coerce')
                    # Se a convers√£o resultou em NaT, usar data atual
                    if pd.isna(solicitacao.data):
                        solicitacao.data = datetime.now()
                else:
                    solicitacao.data = datetime.now()
            except:
                solicitacao.data = datetime.now()
            
            # Processar campos de texto
            solicitacao.solicitante = str(row.get('Solicitante', '')).strip() if pd.notna(row.get('Solicitante', '')) else ''
            solicitacao.codigo = str(row.get('C√≥digo', '')).strip() if pd.notna(row.get('C√≥digo', '')) else ''
            solicitacao.descricao = str(row.get('Descri√ß√£o', '')).strip() if pd.notna(row.get('Descri√ß√£o', '')) else ''
            solicitacao.unidade = str(row.get('Unidade', '')).strip() if pd.notna(row.get('Unidade', '')) else ''
            
            # Processar quantidade com tratamento de erro
            try:
                qtd_str = str(row.get('Quantidade', '')).strip()
                solicitacao.quantidade = int(qtd_str) if qtd_str and qtd_str != '' else 0
            except (ValueError, TypeError):
                solicitacao.quantidade = 0
            
            # Processar loca√ß√£o
            solicitacao.locacao = str(row.get('Loca√ß√£o', '')).strip() if pd.notna(row.get('Loca√ß√£o', '')) and str(row.get('Loca√ß√£o', '')).strip() != '' else None
            solicitacao.status = str(row.get('Status', '')).strip() if pd.notna(row.get('Status', '')) else ''
            
            # Processar quantidade separada da planilha
            try:
                qtd_sep_str = str(row.get('Qtd. Separada', '')).strip()
                solicitacao.qtd_separada = int(qtd_sep_str) if qtd_sep_str and qtd_sep_str != '' else 0
            except (ValueError, TypeError):
                solicitacao.qtd_separada = 0
            
            # Processar Alta Demanda
            try:
                alta_demanda_str = str(row.get('Alta Demanda', '')).strip().lower()
                solicitacao.alta_demanda = alta_demanda_str in ['sim', 's', 'yes', 'y', 'true', '1']
            except (ValueError, TypeError):
                solicitacao.alta_demanda = False
            
            # Calcular saldo baseado na quantidade solicitada e separada (nunca menor que 0)
            solicitacao.saldo = max(0, solicitacao.quantidade - solicitacao.qtd_separada)
            
            # Inicializar atributos necess√°rios para o template
            solicitacao.saldo_estoque = 0
            solicitacao.locacao_matriz = None
            solicitacao.media_mensal = 0
            
            # Enriquecer com dados da matriz do Google Sheets
            if matriz_data and solicitacao.codigo in matriz_data:
                matriz_item = matriz_data[solicitacao.codigo]
                solicitacao.saldo_estoque = matriz_item['saldo_estoque']
                solicitacao.locacao_matriz = matriz_item['locacao_matriz']
                solicitacao.media_mensal = matriz_item['media_mensal']
            
            solicitacoes_list.append(solicitacao)
            
        except Exception as e:
            print(f"Erro ao processar linha {index}: {e}")
            continue
    
    return solicitacoes_list

# Rotas para solicita√ß√µes
@app.route('/solicitacoes')
@login_required
def solicitacoes():
    status_filter = request.args.get('status', '')
    codigo_search = request.args.get('codigo', '')
    
    print(f"DEBUG: status_filter recebido: '{status_filter}' (tipo: {type(status_filter)})")
    print(f"DEBUG: codigo_search recebido: '{codigo_search}' (tipo: {type(codigo_search)})")
    print(f"DEBUG: status_filter repr: {repr(status_filter)}")
    print(f"DEBUG: codigo_search repr: {repr(codigo_search)}")
    
    # Consultar planilha em tempo real - APENAS ONLINE
    df = get_google_sheets_data()
    
    if df is None or df.empty:
        print("‚ùå N√£o foi poss√≠vel obter dados da planilha, tentando novamente...")
        # Tentar novamente com timeout maior
        try:
            import time
            time.sleep(3)  # Aguardar 3 segundos
            df = get_google_sheets_data()
        except Exception as e:
            print(f"‚ùå Segunda tentativa falhou: {e}")
        
        if df is None or df.empty:
            print("‚ùå ERRO: N√£o foi poss√≠vel conectar com a planilha do Google Sheets")
            flash('‚ùå Erro: N√£o foi poss√≠vel conectar com a planilha do Google Sheets. A conta de servi√ßo precisa ter acesso √† planilha. Verifique as permiss√µes e tente novamente.', 'error')
            return render_template('solicitacoes.html', 
                                 solicitacoes=CompleteList([]), 
                                 codigo_search=codigo_search,
                                 contagens={'aberta': 0, 'pendente': 0, 'aprovada': 0, 'em_separacao': 0, 'entrega_parcial': 0, 'cancelada': 0, 'concluida': 0, 'total': 0})
        else:
            print("‚úÖ Segunda tentativa bem-sucedida!")
            # Processar dados da planilha
            solicitacoes_list = process_google_sheets_data(df)
    else:
        print("‚úÖ Dados da planilha obtidos com sucesso!")
        # Processar dados da planilha
        solicitacoes_list = process_google_sheets_data(df)
    
    # Se ainda n√£o temos dados, criar lista vazia
    if 'solicitacoes_list' not in locals():
        solicitacoes_list = []
    
    
    print(f"DEBUG: Total de registros processados: {len(solicitacoes_list)}")
    
    # Filtrar automaticamente as conclu√≠das, faltas e finalizadas para deixar a interface mais limpa
    solicitacoes_list = [s for s in solicitacoes_list if s.status != 'Concluida' and s.status != 'Falta' and s.status != 'Finalizado']
    print(f"DEBUG: Registros ap√≥s filtrar conclu√≠das e faltas: {len(solicitacoes_list)}")
    
    # Aplicar busca por c√≥digo se especificado
    if codigo_search:
        print(f"DEBUG: Aplicando busca por c√≥digo: '{codigo_search}'")
        codigo_search_clean = codigo_search.strip()
        solicitacoes_list = [s for s in solicitacoes_list if codigo_search_clean in str(s.codigo)]
        print(f"DEBUG: Total de registros ap√≥s busca por c√≥digo: {len(solicitacoes_list)}")
    
    # Ordenar por data crescente (mais antigo primeiro)
    solicitacoes_list.sort(key=lambda x: x.data, reverse=False)
    
    # Debug: verificar status dos primeiros registros
    if solicitacoes_list:
        print(f"DEBUG: Primeiros 5 status encontrados:")
        for i, sol in enumerate(solicitacoes_list[:5]):
            print(f"  {i+1}. ID: {sol.id}, Status: '{sol.status}' (repr: {repr(sol.status)})")
    
    # Calcular contagens por status
    status_counts = {}
    for solicitacao in solicitacoes_list:
        status = solicitacao.status
        status_counts[status] = status_counts.get(status, 0) + 1
    
    # Contagens espec√≠ficas para os bot√µes
    contagens = {
        'aberta': status_counts.get('ABERTA', 0) + status_counts.get('Aberta', 0),
        'pendente': status_counts.get('pendente', 0) + status_counts.get('Pendente', 0),
        'aprovada': status_counts.get('aprovada', 0) + status_counts.get('Aprovada', 0),
        'em_separacao': status_counts.get('Em Separa√ß√£o', 0) + status_counts.get('em separa√ß√£o', 0),
        'entrega_parcial': status_counts.get('Entrega Parcial', 0) + status_counts.get('entrega parcial', 0),
        'cancelada': status_counts.get('cancelada', 0) + status_counts.get('Cancelada', 0),
        'concluida': status_counts.get('Concluida', 0) + status_counts.get('concluida', 0),
        'total': len(solicitacoes_list)
    }
    
    print(f"DEBUG: Contagens por status: {contagens}")
    
    solicitacoes = CompleteList(solicitacoes_list)
    
    print(f"DEBUG: Enviando para template - total: {solicitacoes.total}, items: {len(solicitacoes.items)}")
    print(f"DEBUG: status_filter para template: '{status_filter}' (repr: {repr(status_filter)})")
    
    # Adicionar headers para evitar cache
    response = make_response(render_template('solicitacoes.html', 
                         solicitacoes=solicitacoes, 
                         codigo_search=codigo_search,
                         contagens=contagens))
    
    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'
    
    return response

# Fun√ß√£o otimizada para atualizar status
def atualizar_status_para_em_separacao_otimizada(codigos):
    """Atualiza status para 'Em Separa√ß√£o' - VERS√ÉO OTIMIZADA"""
    try:
        # Conectar com Google Sheets
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå N√£o foi poss√≠vel conectar com Google Sheets")
            return False
        
        # Acessar a aba "Solicita√ß√µes"
        worksheet = sheet.get_worksheet(0)
        
        # Obter todos os dados uma √∫nica vez
        all_values = worksheet.get_all_values()
        if not all_values or len(all_values) < 2:
            print("‚ùå Planilha est√° vazia")
            return False
        
        # Encontrar colunas
        headers = all_values[0]
        codigo_col = None
        status_col = None
        
        for i, header in enumerate(headers):
            header_lower = header.lower().strip()
            if 'c√≥digo' in header_lower or 'codigo' in header_lower:
                codigo_col = i
            elif 'status' in header_lower and status_col is None:
                status_col = i
        
        if codigo_col is None or status_col is None:
            print(f"‚ùå Colunas necess√°rias n√£o encontradas - C√≥digo: {codigo_col}, Status: {status_col}")
            return False
        
        print(f"üìä Atualizando status para {len(codigos)} c√≥digos...")
        
        # Preparar atualiza√ß√µes em lote
        updates = []
        codigos_encontrados = set()
        
        # Buscar linhas que precisam ser atualizadas
        for row_num, row in enumerate(all_values[1:], start=2):
            if len(row) > max(codigo_col, status_col):
                codigo_atual = str(row[codigo_col]).strip()
                status_atual = row[status_col].strip() if len(row) > status_col else ''
                
                # Verificar se este c√≥digo est√° na lista e pode ser atualizado
                if codigo_atual in codigos and status_atual not in ['Conclu√≠do', 'Excedido', 'Em Separa√ß√£o']:
                    status_cell_address = f"{chr(65 + status_col)}{row_num}"
                    updates.append({
                        'range': status_cell_address,
                        'values': [['Em Separa√ß√£o']]
                    })
                    codigos_encontrados.add(codigo_atual)
                    print(f"   ‚úÖ C√≥digo {codigo_atual} ser√° atualizado (linha {row_num}) - Status atual: '{status_atual}'")
                elif codigo_atual in codigos:
                    print(f"   ‚ö†Ô∏è C√≥digo {codigo_atual} j√° tem status '{status_atual}' - n√£o ser√° atualizado")
        
        # Executar atualiza√ß√µes em lote se houver alguma
        if updates:
            try:
                worksheet.batch_update(updates)
                print(f"‚úÖ {len(updates)} status atualizados com sucesso!")
                return True
            except Exception as e:
                print(f"‚ùå Erro ao executar atualiza√ß√µes em lote: {e}")
                return False
        else:
            print("‚ö†Ô∏è Nenhuma linha encontrada para atualizar")
            return True
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar status: {e}")
        return False

# Rota para impress√£o de solicita√ß√µes
def atualizar_status_para_em_separacao(codigos):
    """Atualiza status para 'Em Separa√ß√£o' quando solicita√ß√µes s√£o impressas"""
    try:
        # Conectar com Google Sheets
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå N√£o foi poss√≠vel conectar com Google Sheets")
            return False
        
        # Acessar a aba "Solicita√ß√µes"
        worksheet = sheet.get_worksheet(0)
        
        # Obter todos os dados
        all_values = worksheet.get_all_values()
        if not all_values:
            print("‚ùå Planilha est√° vazia")
            return False
        
        # Encontrar colunas
        headers = all_values[0]
        codigo_col = None
        status_col = None
        
        for i, header in enumerate(headers):
            header_lower = header.lower().strip()
            if 'c√≥digo' in header_lower or 'codigo' in header_lower:
                codigo_col = i
            elif 'status' in header_lower and status_col is None:
                status_col = i
        
        if codigo_col is None or status_col is None:
            print("‚ùå Colunas necess√°rias n√£o encontradas")
            return False
        
        # Atualizar status para cada c√≥digo
        for codigo in codigos:
            for row_num, row in enumerate(all_values[1:], start=2):
                if len(row) > codigo_col and str(row[codigo_col]).strip() == str(codigo).strip():
                    # Verificar se n√£o est√° j√° conclu√≠do ou excedido
                    if len(row) > status_col:
                        status_atual = row[status_col].strip()
                        if status_atual not in ['Conclu√≠do', 'Excedido']:
                            # Atualizar para "Em Separa√ß√£o"
                            status_cell_address = f"{chr(65 + status_col)}{row_num}"
                            worksheet.update(status_cell_address, [['Em Separa√ß√£o']])
                            print(f"‚úÖ Status atualizado para 'Em Separa√ß√£o' - C√≥digo {codigo}")
                    break
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar status para Em Separa√ß√£o: {e}")
        return False

@app.route('/solicitacoes/falta')
@login_required
def solicitacoes_falta():
    """P√°gina de solicita√ß√µes com status FALTA"""
    codigo_search = request.args.get('codigo', '')
    
    print(f"üîç P√°gina de FALTAS - Busca por c√≥digo: '{codigo_search}'")
    
    # Consultar planilha em tempo real
    df = get_google_sheets_data()
    
    if df is None or df.empty:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar com Google Sheets")
        flash('‚ùå Erro: N√£o foi poss√≠vel conectar com a planilha do Google Sheets. A conta de servi√ßo precisa ter acesso √† planilha. Verifique as permiss√µes e tente novamente.', 'error')
        return render_template('solicitacoes_falta.html', 
                             solicitacoes=CompleteList([]), 
                             codigo_search=codigo_search,
                             contagens={'falta': 0, 'total': 0})
    
    # Processar dados da planilha
    solicitacoes_list = process_google_sheets_data(df)
    
    # Filtrar APENAS itens com status "Falta"
    solicitacoes_list = [s for s in solicitacoes_list if s.status == 'Falta']
    print(f"üìä Total de itens com status FALTA: {len(solicitacoes_list)}")
    
    # Aplicar busca por c√≥digo se especificado
    if codigo_search:
        codigo_search_clean = codigo_search.strip()
        solicitacoes_list = [s for s in solicitacoes_list if str(s.codigo).strip() == codigo_search_clean]
        print(f"üìä Ap√≥s filtro por c√≥digo: {len(solicitacoes_list)} registros")
    
    # Criar objeto CompleteList
    solicitacoes_completas = CompleteList(solicitacoes_list)
    
    # Contagens
    contagens = {
        'falta': len(solicitacoes_list),
        'total': len(solicitacoes_list)
    }
    
    return render_template('solicitacoes_falta.html', 
                         solicitacoes=solicitacoes_completas,
                         codigo_search=codigo_search,
                         contagens=contagens)

@app.route('/solicitacoes/print')
@login_required
def print_solicitacoes():
    """P√°gina de impress√£o de solicita√ß√µes"""
    status_filter = request.args.get('status', '')
    codigo_search = request.args.get('codigo', '')
    
    print(f"DEBUG PRINT: status_filter: '{status_filter}', codigo_search: '{codigo_search}'")
    
    # Consultar planilha em tempo real - APENAS ONLINE
    df = get_google_sheets_data()
    
    if df is None or df.empty:
        print("‚ùå ERRO: N√£o foi poss√≠vel conectar com a planilha do Google Sheets")
        flash('‚ùå Erro: N√£o foi poss√≠vel conectar com a planilha do Google Sheets. Verifique sua conex√£o com a internet e tente novamente.', 'error')
        return render_template('print_solicitacoes.html', 
                             solicitacoes=[],
                             status_filter=status_filter,
                             codigo_search=codigo_search)
    
    # Processar dados da planilha
    solicitacoes_list = process_google_sheets_data(df)
    
    # Debug: mostrar status √∫nicos encontrados
    status_unicos = list(set([s.status for s in solicitacoes_list]))
    print(f"DEBUG PRINT: Status √∫nicos encontrados: {status_unicos}")
    
    # Filtrar automaticamente as conclu√≠das e finalizadas para deixar a interface mais limpa
    solicitacoes_list = [s for s in solicitacoes_list if s.status != 'Concluida' and s.status != 'Finalizado']
    print(f"DEBUG PRINT: Total de registros ap√≥s filtrar conclu√≠das: {len(solicitacoes_list)}")
    
    # Aplicar filtro por status se especificado
    if status_filter:
        print(f"DEBUG PRINT: Aplicando filtro para status: '{status_filter}'")
        # Fazer compara√ß√£o flex√≠vel para diferentes varia√ß√µes de status
        if status_filter.upper() == 'ABERTA':
            solicitacoes_list = [s for s in solicitacoes_list if s.status.upper() == 'ABERTA' or s.status == 'Aberta']
        else:
            solicitacoes_list = [s for s in solicitacoes_list if s.status == status_filter]
        print(f"DEBUG PRINT: Total de registros ap√≥s filtro: {len(solicitacoes_list)}")
    
    # Aplicar busca por c√≥digo se especificado
    if codigo_search:
        print(f"DEBUG PRINT: Aplicando busca por c√≥digo: '{codigo_search}'")
        codigo_search_clean = codigo_search.strip()
        solicitacoes_list = [s for s in solicitacoes_list if codigo_search_clean in str(s.codigo)]
    
    # Ordenar por data decrescente
    solicitacoes_list.sort(key=lambda x: x.data, reverse=True)
    
    # Atualizar status para "Em Separa√ß√£o" quando impresso
    codigos_para_imprimir = [s.codigo for s in solicitacoes_list if s.status in ['Aberta', 'pendente', 'aprovada']]
    if codigos_para_imprimir:
        print(f"üñ®Ô∏è Atualizando status para 'Em Separa√ß√£o' para c√≥digos: {codigos_para_imprimir}")
        atualizar_status_para_em_separacao(codigos_para_imprimir)
    
    print(f"DEBUG PRINT: Total de registros para impress√£o: {len(solicitacoes_list)}")
    
    return render_template('print_solicitacoes.html', 
                         solicitacoes=solicitacoes_list,
                         status_filter=status_filter,
                         codigo_search=codigo_search)

# Rota de teste simples
@app.route('/simple-solicitacoes')
@login_required
def simple_solicitacoes():
    status_filter = request.args.get('status', '')
    
    print(f"DEBUG SIMPLE: status_filter recebido: '{status_filter}'")
    
    query = Solicitacao.query
    if status_filter:
        query = query.filter_by(status=status_filter)
    
    solicitacoes_list = query.order_by(Solicitacao.data.asc()).all()
    
    # Criar objeto compat√≠vel
    
    solicitacoes = CompleteList(solicitacoes_list)
    
    print(f"DEBUG SIMPLE: Enviando para template - total: {solicitacoes.total}")
    
    return render_template('simple_solicitacoes.html', 
                         solicitacoes=solicitacoes, 
                         status_filter=status_filter)

# Rota para sincronizar dados da matriz
@app.route('/sincronizar-matriz')
@login_required
def sincronizar_matriz():
    """Sincroniza dados da aba MATRIZ_IMPORTADA do Google Sheets"""
    print("üîÑ Sincronizando dados da aba MATRIZ_IMPORTADA...")
    
    # Buscar dados da matriz do Google Sheets
    matriz_data = get_matriz_data_from_sheets()
    
    # Mensagem de sucesso removida - a barra de progresso j√° indica a conclus√£o
    
    return redirect(url_for('solicitacoes'))

@app.route('/formulario-impressao')
@login_required
def formulario_impressao():
    """Exibe formul√°rio de impress√£o para separa√ß√£o f√≠sica"""
    try:
        # Obter IDs selecionados da query string
        ids_selecionados = request.args.get('ids', '').split(',')
        ids_selecionados = [id.strip() for id in ids_selecionados if id.strip()]
        
        # Verificar se veio da p√°gina de faltas
        origem = request.args.get('origem', '')
        tipo_romaneio = 'Itens em Falta' if origem == 'falta' else 'Romaneio de Separa√ß√£o'
        
        if not ids_selecionados:
            flash('Nenhuma solicita√ß√£o selecionada', 'warning')
            return redirect(url_for('solicitacoes'))
        
        # Validar se a sele√ß√£o pode ser impressa
        validacao = validar_selecao_impressao(ids_selecionados)
        if not validacao['valido']:
            flash(f'‚ùå {validacao["mensagem"]}', 'error')
            return redirect(url_for('solicitacoes'))
        
        # Buscar dados das solicita√ß√µes selecionadas do Google Sheets
        solicitacoes_selecionadas = buscar_solicitacoes_selecionadas(ids_selecionados)
        
        if not solicitacoes_selecionadas:
            flash('Nenhuma solicita√ß√£o encontrada', 'error')
            return redirect(url_for('solicitacoes'))
        
        # Criar impress√£o no sistema de controle
        id_impressao = criar_impressao(
            usuario=current_user.username,
            solicitacoes_selecionadas=solicitacoes_selecionadas,
            observacoes=""  # Deixar vazio - observa√ß√µes ser√£o preenchidas no processamento
        )
        
        # Guardar tipo_romaneio em cache para usar na gera√ß√£o do PDF
        if 'romaneio_info' not in globals():
            globals()['romaneio_info'] = {}
        globals()['romaneio_info'][id_impressao] = tipo_romaneio
        
        if not id_impressao:
            flash('Erro ao criar controle de impress√£o', 'error')
            return redirect(url_for('solicitacoes'))
        
        return render_template('formulario_impressao.html', 
                             solicitacoes=solicitacoes_selecionadas,
                             ids_selecionados=ids_selecionados,
                             id_impressao=id_impressao,
                             tipo_romaneio=tipo_romaneio,
                             origem=origem)
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar formul√°rio de impress√£o: {e}")
        flash('Erro ao carregar formul√°rio de impress√£o', 'error')
        return redirect(url_for('solicitacoes'))

@app.route('/alterar-status-impressao', methods=['POST'])
@login_required
def alterar_status_impressao():
    """Altera status das solicita√ß√µes selecionadas para 'Em Separa√ß√£o' ap√≥s impress√£o - Apenas Google Sheets"""
    try:
        print("üñ®Ô∏è Alterando status das solicita√ß√µes selecionadas para 'Em Separa√ß√£o' ap√≥s impress√£o...")
        
        # Obter dados da requisi√ß√£o
        data = request.get_json()
        ids_selecionados = data.get('ids_selecionados', [])
        
        if not ids_selecionados:
            return jsonify({
                'success': False,
                'message': 'Nenhuma solicita√ß√£o selecionada',
                'count': 0
            })
        
        print(f"üìã IDs selecionados: {ids_selecionados}")
        
        # Atualizar apenas as solicita√ß√µes selecionadas no Google Sheets
        count = atualizar_status_google_sheets_selecionadas(ids_selecionados)
        
        if count == 0:
            return jsonify({
                'success': True, 
                'message': 'Nenhuma solicita√ß√£o encontrada para alterar status',
                'count': 0
            })
        
        return jsonify({
            'success': True,
            'message': f'{count} solicita√ß√µes selecionadas alteradas para "Em Separa√ß√£o" no Google Sheets',
            'count': count
        })
        
    except Exception as e:
        print(f"‚ùå Erro ao alterar status das solicita√ß√µes: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro ao alterar status: {str(e)}',
            'count': 0
        }), 500

@app.route('/controle-impressoes')
@login_required
def controle_impressoes():
    """P√°gina de controle de impress√µes"""
    try:
        # Obter par√¢metros de filtro
        status_filtro = request.args.get('status', '')
        usuario_filtro = request.args.get('usuario', '')
        data_filtro = request.args.get('data', '')
        id_filtro = request.args.get('id', '')
        
        # Buscar todas as impress√µes (n√£o apenas pendentes)
        todas_impressoes = buscar_todas_impressoes()
        
        # Aplicar filtros
        impressoes_filtradas = todas_impressoes
        
        if status_filtro:
            impressoes_filtradas = [imp for imp in impressoes_filtradas if imp.get('status', '').lower() == status_filtro.lower()]
        
        if usuario_filtro:
            impressoes_filtradas = [imp for imp in impressoes_filtradas if usuario_filtro.lower() in imp.get('usuario_impressao', '').lower()]
        
        if data_filtro:
            impressoes_filtradas = [imp for imp in impressoes_filtradas if data_filtro in imp.get('data_impressao', '')]
        
        if id_filtro:
            impressoes_filtradas = [imp for imp in impressoes_filtradas if id_filtro.lower() in imp.get('id_impressao', '').lower()]
        
        # Adicionar informa√ß√µes sobre PDFs para cada impress√£o
        for impressao in impressoes_filtradas:
            pdf_info = verificar_pdf_romaneio(impressao.get('id_impressao', ''))
            impressao['pdf_info'] = pdf_info
        
        return render_template('controle_impressoes.html', 
                             impressoes=impressoes_filtradas,
                             filtros={
                                 'status': status_filtro,
                                 'usuario': usuario_filtro,
                                 'data': data_filtro,
                                 'id': id_filtro
                             })
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar controle de impress√µes: {e}")
        flash('Erro ao carregar controle de impress√µes', 'error')
        return redirect(url_for('solicitacoes'))

@app.route('/imprimir-romaneio/<id_impressao>')
@login_required
def imprimir_romaneio(id_impressao):
    """Imprime o PDF salvo do romaneio diretamente da pasta"""
    try:
        import os
        from flask import send_file
        
        print(f"üñ®Ô∏è Buscando PDF do romaneio: {id_impressao}")
        
        # Caminho da pasta onde os PDFs s√£o salvos
        pasta_pdfs = 'Romaneios_Separacao'
        
        # Nome do arquivo PDF original
        nome_arquivo_original = f"{id_impressao}.pdf"
        caminho_original = os.path.join(pasta_pdfs, nome_arquivo_original)
        
        # Nome do arquivo PDF de c√≥pia (se existir)
        nome_arquivo_copia = f"{id_impressao}_Copia.pdf"
        caminho_copia = os.path.join(pasta_pdfs, nome_arquivo_copia)
        
        # Priorizar o PDF original, mas aceitar c√≥pia se necess√°rio
        if os.path.exists(caminho_original):
            print(f"‚úÖ PDF original encontrado: {caminho_original}")
            return send_file(
                caminho_original,
                as_attachment=False,  # Abrir no navegador em vez de baixar
                mimetype='application/pdf',
                download_name=nome_arquivo_original
            )
        elif os.path.exists(caminho_copia):
            print(f"‚úÖ PDF de c√≥pia encontrado: {caminho_copia}")
            return send_file(
                caminho_copia,
                as_attachment=False,  # Abrir no navegador em vez de baixar
                mimetype='application/pdf',
                download_name=nome_arquivo_copia
            )
        else:
            print(f"‚ùå PDF n√£o encontrado: {caminho_original} ou {caminho_copia}")
            flash(f'PDF do romaneio {id_impressao} n√£o encontrado', 'error')
            return redirect(url_for('controle_impressoes'))
            
    except Exception as e:
        print(f"‚ùå Erro ao imprimir romaneio: {e}")
        flash('Erro ao abrir PDF do romaneio', 'error')
        return redirect(url_for('controle_impressoes'))

def verificar_pdf_romaneio(id_impressao):
    """Verifica se existe PDF do romaneio e retorna informa√ß√µes"""
    import os
    from datetime import datetime
    
    pasta_pdfs = 'Romaneios_Separacao'
    
    # Verificar PDF original
    nome_original = f"{id_impressao}.pdf"
    caminho_original = os.path.join(pasta_pdfs, nome_original)
    
    # Verificar PDF de c√≥pia
    nome_copia = f"{id_impressao}_Copia.pdf"
    caminho_copia = os.path.join(pasta_pdfs, nome_copia)
    
    if os.path.exists(caminho_original):
        stat = os.stat(caminho_original)
        return {
            'existe': True,
            'tipo': 'original',
            'caminho': caminho_original,
            'nome': nome_original,
            'tamanho': stat.st_size,
            'data_modificacao': datetime.fromtimestamp(stat.st_mtime)
        }
    elif os.path.exists(caminho_copia):
        stat = os.stat(caminho_copia)
        return {
            'existe': True,
            'tipo': 'copia',
            'caminho': caminho_copia,
            'nome': nome_copia,
            'tamanho': stat.st_size,
            'data_modificacao': datetime.fromtimestamp(stat.st_mtime)
        }
    else:
        return {'existe': False}

@app.route('/processar-romaneio/<id_impressao>')
@login_required
def processar_romaneio(id_impressao):
    """P√°gina para processar um romaneio - preencher quantidades separadas"""
    try:
        print(f"üîÑ Processando romaneio: {id_impressao}")
        
        # Buscar dados do romaneio
        sheet = get_google_sheets_connection()
        if not sheet:
            flash('Erro ao conectar com Google Sheets', 'error')
            return redirect(url_for('controle_impressoes'))
        
        # Buscar dados da impress√£o
        impressoes_worksheet = sheet.worksheet("IMPRESSOES")
        all_values = impressoes_worksheet.get_all_values()
        
        romaneio_data = None
        for row in all_values[1:]:  # Pular cabe√ßalho
            if len(row) >= 4 and row[0] == id_impressao:
                romaneio_data = {
                    'id_impressao': row[0],
                    'data_impressao': row[1],
                    'usuario_impressao': row[2],
                    'status': row[3],
                    'total_itens': int(row[4]) if row[4].isdigit() else 0,
                    'observacoes': row[5] if len(row) > 5 else ''
                }
                break
        
        if not romaneio_data:
            flash('Romaneio n√£o encontrado', 'error')
            return redirect(url_for('controle_impressoes'))
        
        # Buscar itens da impress√£o
        itens_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
        itens_values = itens_worksheet.get_all_values()
        
        print(f"üìã Total de linhas na aba IMPRESSAO_ITENS: {len(itens_values)}")
        print(f"üîç Buscando itens para romaneio: {id_impressao}")
        
        itens_data = []
        # Buscar nas linhas de dados (pular cabe√ßalho)
        for i, row in enumerate(itens_values[1:], start=2):
            print(f"   Linha {i}: {row[:5]}...")
            if len(row) >= 10 and row[0] == id_impressao:
                print(f"   ‚úÖ Item encontrado: {row[4]} - {row[5]}")
                item = {
                    'id_solicitacao': row[1],
                    'data': row[2],
                    'solicitante': row[3],
                    'codigo': row[4],
                    'descricao': row[5],
                    'quantidade': int(row[7]) if row[7].isdigit() else 0,  # Quantidade na posi√ß√£o 7
                    'unidade': row[6],  # Unidade na posi√ß√£o 6
                    'alta_demanda': row[10].lower() in ['sim', 's', 'yes', 'y', 'true', '1'] if len(row) > 10 else False,
                    'locacao_matriz': row[8],
                    'saldo_estoque': int(row[9]) if row[9].isdigit() else 0,
                    'media_mensal': int(row[10]) if row[10].isdigit() else 0,
                    'qtd_separada_atual': 0,
                    'observacoes_item': '',
                    'status_item': 'Pendente' if len(row) <= 12 or row[12].lower() in ['false', '0', ''] else ('Processado' if row[12].lower() in ['true', '1', 'processado'] else row[12])  # STATUS_ITEM na posi√ß√£o 12
                }
                itens_data.append(item)
        
        print(f"üì¶ Total de itens encontrados: {len(itens_data)}")
        
        # Buscar quantidades j√° separadas das solicita√ß√µes
        worksheets = sheet.worksheets()
        print(f"üìã Abas dispon√≠veis para processamento: {[ws.title for ws in worksheets]}")
        
        solicitacoes_worksheet = None
        possible_names = ["Solicita√ß√µes", "SOLICITA√á√ïES", "Solicitacoes", "SOLICITACOES", "Solicita√ß√µes", "Solicitacoes"]
        
        for name in possible_names:
            try:
                solicitacoes_worksheet = sheet.worksheet(name)
                print(f"‚úÖ Encontrada aba para processamento: {name}")
                break
            except:
                continue
        
        if not solicitacoes_worksheet:
            print("‚ùå Nenhuma aba de solicita√ß√µes encontrada para processamento")
            flash('Aba de solicita√ß√µes n√£o encontrada', 'error')
            return redirect(url_for('controle_impressoes'))
        
        solicitacoes_values = solicitacoes_worksheet.get_all_values()
        
        # Mapear quantidades separadas e saldos por ID da solicita√ß√£o
        qtd_separadas = {}
        saldos = {}
        
        # Encontrar colunas necess√°rias
        header_solicitacoes = solicitacoes_values[0] if solicitacoes_values else []
        id_solicitacao_col = None
        qtd_separada_col = None
        saldo_col = None
        
        for i, col_name in enumerate(header_solicitacoes):
            col_name_clean = col_name.strip()
            if col_name_clean == 'ID_SOLICITACAO':
                id_solicitacao_col = i
            elif col_name_clean == 'Qtd. Separada':
                qtd_separada_col = i
            elif col_name_clean == 'Saldo':
                saldo_col = i
        
        print(f"üîç Colunas encontradas - ID_SOLICITACAO: {id_solicitacao_col}, Qtd. Separada: {qtd_separada_col}, Saldo: {saldo_col}")
        
        # Se n√£o encontrou as colunas pelos nomes, usar posi√ß√µes fixas conhecidas
        if id_solicitacao_col is None:
            id_solicitacao_col = 15  # Coluna P
            print(f"üìç Usando posi√ß√£o fixa para ID_SOLICITACAO: coluna {id_solicitacao_col}")
        
        if qtd_separada_col is None:
            qtd_separada_col = 10  # Coluna K
            print(f"üìç Usando posi√ß√£o fixa para Qtd. Separada: coluna {qtd_separada_col}")
        
        if saldo_col is None:
            saldo_col = 12  # Coluna M (pr√≥xima √† Qtd. Separada)
            print(f"üìç Usando posi√ß√£o fixa para Saldo: coluna {saldo_col}")
        
        for row in solicitacoes_values[1:]:  # Pular cabe√ßalho
            if len(row) > max(id_solicitacao_col, qtd_separada_col, saldo_col):
                try:
                    id_solic = row[id_solicitacao_col].strip()
                    qtd_sep = int(row[qtd_separada_col]) if row[qtd_separada_col].strip() else 0
                    saldo_atual = int(row[saldo_col]) if row[saldo_col].strip() else 0
                    if id_solic:  # S√≥ adicionar se tem ID v√°lido
                        qtd_separadas[id_solic] = qtd_sep
                        saldos[id_solic] = saldo_atual
                        print(f"   ‚úÖ ID: {id_solic} -> Qtd Separada: {qtd_sep}, Saldo: {saldo_atual}")
                except (ValueError, IndexError) as e:
                    print(f"   ‚ùå Erro ao processar linha: {e}")
                    continue
        
        # Atualizar itens com quantidades separadas e saldos
        print(f"üìä Total de quantidades separadas encontradas: {len(qtd_separadas)}")
        print(f"üìä Total de saldos encontrados: {len(saldos)}")
        print(f"üîç IDs com quantidade separada: {list(qtd_separadas.keys())[:5]}...")
        
        for item in itens_data:
            qtd_atual = qtd_separadas.get(item['id_solicitacao'], 0)
            saldo_atual = saldos.get(item['id_solicitacao'], 0)
            item['qtd_separada_atual'] = qtd_atual
            item['saldo_atual'] = saldo_atual
            print(f"   üì¶ Item {item['id_solicitacao']}: Qtd Separada = {qtd_atual}, Saldo = {saldo_atual}")
        
        print(f"‚úÖ Renderizando template com {len(itens_data)} itens")
        return render_template('processar_romaneio.html', 
                             romaneio=romaneio_data,
                             itens=itens_data)
        
    except Exception as e:
        print(f"‚ùå Erro ao processar romaneio: {e}")
        flash('Erro ao carregar dados do romaneio', 'error')
        return redirect(url_for('controle_impressoes'))

# =============================================================================
# FUN√á√ïES OTIMIZADAS PARA PROCESSAMENTO DE ROMANEIOS
# =============================================================================

@cached_function(cache_duration=15, force_refresh_interval=10)  # Cache muito curto para solicita√ß√µes ativas
def buscar_solicitacoes_ativas(limite=None, offset=0):
    """Busca apenas solicita√ß√µes com status ativo (Aberto, Em Separa√ß√£o) - OTIMIZADO COM PAGINA√á√ÉO"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            return None, None
        
        # Buscar aba de solicita√ß√µes ativas
        solicitacoes_worksheet = None
        possible_names = ["Solicita√ß√µes", "SOLICITA√á√ïES", "Solicitacoes", "SOLICITACOES"]
        
        for name in possible_names:
            try:
                solicitacoes_worksheet = sheet.worksheet(name)
                break
            except:
                continue
        
        if not solicitacoes_worksheet:
            return None, None
        
        # OTIMIZA√á√ÉO: Buscar apenas linhas necess√°rias com pagina√ß√£o
        if limite:
            # Usar range espec√≠fico para pagina√ß√£o
            start_row = offset + 2  # +2 porque a primeira linha √© cabe√ßalho e come√ßamos do 1
            end_row = start_row + limite - 1
            range_name = f"A{start_row}:Z{end_row}"
            print(f"üìÑ Buscando range: {range_name}")
            all_values = solicitacoes_worksheet.get(range_name)
            # Adicionar cabe√ßalho
            header = solicitacoes_worksheet.get('A1:Z1')[0] if solicitacoes_worksheet.get('A1:Z1') else []
            all_values = [header] + all_values if header else all_values
        else:
            # Buscar todas as linhas (comportamento original)
            all_values = solicitacoes_worksheet.get_all_values()
        
        if not all_values or len(all_values) < 2:
            return [], all_values[0] if all_values else []
        
        header = all_values[0]
        status_col = None
        id_solicitacao_col = None
        
        # Encontrar colunas necess√°rias
        for i, col_name in enumerate(header):
            col_name_clean = col_name.strip()
            if col_name_clean == 'Status':
                status_col = i
        
        # ID_SOLICITACAO est√° na coluna P (√≠ndice 15)
        id_solicitacao_col = 15
        
        if status_col is None:
            print("‚ö†Ô∏è Coluna Status n√£o encontrada, retornando todas as solicita√ß√µes")
            return all_values[1:], header
        
        # Filtrar apenas status ativos - OTIMIZA√á√ÉO: usar list comprehension
        solicitacoes_ativas = [
            row for row in all_values[1:] 
            if len(row) > status_col and row[status_col].strip() in ['Aberto', 'Em Separa√ß√£o']
        ]
        
        print(f"üìä Encontradas {len(solicitacoes_ativas)} solicita√ß√µes ativas (de {len(all_values)-1} total)")
        print(f"üìç Coluna ID_SOLICITACAO: {id_solicitacao_col}")
        return solicitacoes_ativas, header
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar solicita√ß√µes ativas: {e}")
        return None, None

def processar_baixa_item(id_solicitacao, qtd_separada, observacoes, solicitacoes_ativas, header, status_especial=None):
    """Processa a baixa de um item espec√≠fico - OTIMIZADO"""
    try:
        # ID_SOLICITACAO est√° na coluna P (√≠ndice 15)
        id_solicitacao_col = 15  # Coluna P
        print(f"üîç Usando coluna P (√≠ndice {id_solicitacao_col}) para ID_SOLICITACAO")
        
        # Verificar se a coluna P existe
        if len(header) <= id_solicitacao_col:
            print(f"‚ùå Coluna P n√£o existe. Total de colunas: {len(header)}")
            print(f"üîç Header completo: {header}")
            return None
        
        # OTIMIZA√á√ÉO: Usar dict para busca O(1) em vez de loop O(n)
        # Usar ID_SOLICITACAO como chave em vez da primeira coluna
        solicitacoes_dict = {}
        print(f"üîç Processando {len(solicitacoes_ativas)} solicita√ß√µes ativas...")
        for i, row in enumerate(solicitacoes_ativas):
            print(f"   Linha {i}: {row[:3]}... (total: {len(row)} colunas)")
            if len(row) > id_solicitacao_col and row[id_solicitacao_col].strip():
                id_solic = row[id_solicitacao_col]
                # i √© o √≠ndice na lista solicitacoes_ativas (0-based)
                # Para converter para linha da planilha: i + 2 (pular cabe√ßalho + 1)
                linha_planilha = i + 2
                solicitacoes_dict[id_solic] = (i, row, linha_planilha)
                print(f"   ‚úÖ Adicionado ID: {id_solic} (linha {linha_planilha})")
            else:
                print(f"   ‚ùå Linha {i} n√£o tem ID v√°lido na coluna {id_solicitacao_col}")
        
        print(f"üìä Total de IDs encontrados: {len(solicitacoes_dict)}")
        
        if id_solicitacao not in solicitacoes_dict:
            print(f"‚ùå Solicita√ß√£o {id_solicitacao} n√£o encontrada nas ativas")
            print(f"üîç IDs dispon√≠veis nas solicita√ß√µes ativas: {list(solicitacoes_dict.keys())[:5]}...")
            print(f"üîç Total de solicita√ß√µes ativas: {len(solicitacoes_dict)}")
            return None
        
        i, row, linha_planilha = solicitacoes_dict[id_solicitacao]
        print(f"‚úÖ Processando baixa para {id_solicitacao}: {qtd_separada} unidades (linha {linha_planilha})")
        
        # Encontrar colunas necess√°rias - OTIMIZA√á√ÉO: cache de √≠ndices
        col_indices = {}
        for j, col_name in enumerate(header):
            col_name_clean = col_name.strip()
            if col_name_clean == 'Qtd. Separada':
                col_indices['qtd_separada'] = j
            elif col_name_clean == 'Status':
                col_indices['status'] = j
            elif col_name_clean == 'Saldo':
                col_indices['saldo'] = j
            elif col_name_clean == 'Quantidade':
                col_indices['quantidade'] = j
        
        # Verificar se todas as colunas foram encontradas
        required_cols = ['qtd_separada', 'status', 'saldo', 'quantidade']
        if not all(col in col_indices for col in required_cols):
            print(f"‚ùå Colunas necess√°rias n√£o encontradas: {col_indices}")
            return None
        
        # Obter valores atuais da planilha Solicita√ß√µes
        qtd_separada_atual = int(row[col_indices['qtd_separada']]) if row[col_indices['qtd_separada']].strip() else 0
        quantidade_solicitada = int(row[col_indices['quantidade']]) if row[col_indices['quantidade']].strip() else 0
        
        print(f"üìä VALORES ATUAIS DA PLANILHA:")
        print(f"   Qtd. Separada atual: {qtd_separada_atual}")
        print(f"   Quantidade solicitada: {quantidade_solicitada}")
        print(f"   Qtd. Separada nova (do formul√°rio): {qtd_separada}")
        
        # CORRE√á√ÉO: Somar o valor existente com o novo valor
        qtd_separada_total = qtd_separada_atual + qtd_separada
        
        # CORRE√á√ÉO: Calcular Saldo = Quantidade - Qtd. Separada Total
        saldo = quantidade_solicitada - qtd_separada_total
        
        print(f"üßÆ C√ÅLCULOS:")
        print(f"   Qtd. Separada Total: {qtd_separada_atual} + {qtd_separada} = {qtd_separada_total}")
        print(f"   Saldo: {quantidade_solicitada} - {qtd_separada_total} = {saldo}")
        
        # Determinar status - OTIMIZA√á√ÉO: usar operador tern√°rio
        if status_especial:
            status = status_especial
            print(f"üéØ Status especial aplicado: {status}")
        else:
            status = ('Parcial' if qtd_separada_total < quantidade_solicitada else
                     'Concluida' if qtd_separada_total == quantidade_solicitada else 'Excesso')
            print(f"üìä Status calculado automaticamente: {status}")
        
        # Preparar atualiza√ß√£o
        atualizacao = {
            'id_solicitacao': id_solicitacao,
            'qtd_separada_total': qtd_separada_total,
            'status': status,
            'saldo': saldo,
            'observacoes': observacoes,
            'col_indices': col_indices,
            'row_index': linha_planilha  # Usar a linha correta da planilha
        }
        
        print(f"‚úÖ RESULTADO FINAL:")
        print(f"   Qtd. Separada Total: {qtd_separada_total}")
        print(f"   Saldo: {saldo}")
        print(f"   Status: {status}")
        print(f"   Linha da planilha: {linha_planilha}")
        
        return atualizacao
        
    except Exception as e:
        print(f"‚ùå Erro ao processar baixa do item {id_solicitacao}: {e}")
        return None

def criar_colunas_impressao_itens():
    """Cria/verifica as colunas necess√°rias na aba IMPRESSAO_ITENS"""
    try:
        sheet = get_google_sheets_connection()
        if not sheet:
            return False
            
        impressao_itens_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
        
        # Definir colunas necess√°rias na ordem correta
        colunas_necessarias = [
            'ID_IMPRESSAO',
            'ID_SOLICITACAO', 
            'DATA',
            'SOLICITANTE',
            'CODIGO',
            'DESCRICAO',
            'UNIDADE',
            'QUANTIDADE',
            'LOCACAO_MATRIZ',
            'SALDO_ESTOQUE',
            'MEDIA_MENSAL',
            'ALTA_DEMANDA',
            'STATUS_ITEM',
            'QTD_SEPARADA',
            'OBSERVACOES_ITEM',
            'DATA_SEPARACAO',
            'SEPARADO_POR',
            'USUARIO_PROCESSAMENTO',
            'CREATED_AT',
            'UPDATED_AT'
        ]
        
        # Verificar se j√° existe cabe√ßalho
        all_values = impressao_itens_worksheet.get_all_values()
        
        if not all_values or len(all_values) == 0:
            print("üìã Criando cabe√ßalho na aba IMPRESSAO_ITENS...")
            impressao_itens_worksheet.append_row(colunas_necessarias)
            print(f"‚úÖ Cabe√ßalho criado com {len(colunas_necessarias)} colunas")
            return True
        
        # Verificar se cabe√ßalho est√° correto
        header_atual = all_values[0] if all_values else []
        print(f"üìç Cabe√ßalho atual: {header_atual}")
        
        # Verificar se todas as colunas necess√°rias existem
        colunas_faltando = []
        for coluna in colunas_necessarias:
            if coluna not in header_atual:
                colunas_faltando.append(coluna)
        
        if colunas_faltando:
            print(f"‚ö†Ô∏è Colunas faltando: {colunas_faltando}")
            print("üîÑ Adicionando colunas faltantes...")
            
            # Adicionar colunas faltantes no final
            for coluna in colunas_faltando:
                impressao_itens_worksheet.add_cols(1)
                # Encontrar a √∫ltima coluna preenchida
                ultima_coluna = len(header_atual)
                impressao_itens_worksheet.update(f'{chr(65 + ultima_coluna)}1', [[coluna]])
                header_atual.append(coluna)
                print(f"‚úÖ Adicionada coluna: {coluna}")
        else:
            print("‚úÖ Todas as colunas necess√°rias j√° existem")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar colunas IMPRESSAO_ITENS: {e}")
        return False

def atualizar_imprecao_itens(id_romaneio, itens_processados, usuario_processamento):
    """Atualiza a aba IMPRESSAO_ITENS com as baixas processadas - VERS√ÉO SIMPLIFICADA"""
    try:
        print(f"üöÄ ATUALIZANDO IMPRESSAO_ITENS - VERS√ÉO SIMPLIFICADA")
        print(f"üì¶ Romaneio: {id_romaneio}")
        print(f"üìã Itens processados: {itens_processados}")
        print(f"üë§ Usu√°rio: {usuario_processamento}")
        
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå Erro ao conectar com Google Sheets")
            return False
        
        impressao_itens_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
        
        # Buscar TODAS as linhas da planilha
        all_values = impressao_itens_worksheet.get_all_values()
        print(f"üìä Total de linhas na IMPRESSAO_ITENS: {len(all_values)}")
        
        if not all_values or len(all_values) < 2:
            print("‚ùå Aba IMPRESSAO_ITENS vazia")
            return False
        
        # ABORDAGEM SIMPLIFICADA: Atualizar diretamente usando range espec√≠fico
        print(f"üîÑ ABORDAGEM SIMPLIFICADA - Atualizando diretamente")
        
        # Preparar dados de atualiza√ß√£o
        data_processamento = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        atualizacoes = []
        
        # Para cada item processado, atualizar diretamente
        for item in itens_processados:
            id_solicitacao = item.get('id_solicitacao', '')
            qtd_separada = item.get('qtd_separada', 0)
            observacoes = item.get('observacoes', '')
            
            print(f"üîÑ Processando item: {id_solicitacao} - Qtd: {qtd_separada}, Obs: '{observacoes}'")
            
            # Buscar a linha correspondente na planilha
            linha_encontrada = None
            for i, row in enumerate(all_values[1:], start=2):
                # Verificar se √© o item correto (buscar por ID_Solicitacao)
                if len(row) > 1 and row[1] == id_solicitacao:  # Coluna B = ID_Solicitacao
                    linha_encontrada = i
                    print(f"   ‚úÖ Item encontrado na linha {i}")
                    break
            
            if linha_encontrada:
                # Atualizar QTD_SEPARADA (coluna N = 13)
                atualizacoes.append({
                    'range': f'N{linha_encontrada}',
                    'values': [[str(qtd_separada)]]
                })
                
                # Atualizar OBSERVACOES_ITEM (coluna O = 14)
                atualizacoes.append({
                    'range': f'O{linha_encontrada}',
                    'values': [[observacoes]]
                })
                
                # Atualizar STATUS_ITEM para "Processado" (coluna M = 12)
                atualizacoes.append({
                    'range': f'M{linha_encontrada}',
                    'values': [['Processado']]
                })
                
                # Atualizar DATA_SEPARACAO (coluna P = 15)
                atualizacoes.append({
                    'range': f'P{linha_encontrada}',
                    'values': [[data_processamento]]
                })
                
                # Atualizar USUARIO_PROCESSAMENTO (coluna R = 17)
                atualizacoes.append({
                    'range': f'R{linha_encontrada}',
                    'values': [[usuario_processamento]]
                })
                
                print(f"   ‚úÖ Atualiza√ß√µes preparadas para linha {linha_encontrada}")
            else:
                print(f"   ‚ùå Item {id_solicitacao} n√£o encontrado na planilha!")
        
        print(f"üìä Total de atualiza√ß√µes preparadas: {len(atualizacoes)}")
        
        # Executar atualiza√ß√µes
        if atualizacoes:
            print(f"üîÑ Executando {len(atualizacoes)} atualiza√ß√µes na IMPRESSAO_ITENS:")
            for atualizacao in atualizacoes:
                print(f"   üìç {atualizacao['range']}: {atualizacao['values']}")
            
            try:
                impressao_itens_worksheet.batch_update(atualizacoes)
                print(f"‚úÖ {len(atualizacoes)} itens atualizados na IMPRESSAO_ITENS")
                return True
            except Exception as e:
                print(f"‚ùå Erro ao executar batch_update: {e}")
                return False
        else:
            print("‚ö†Ô∏è Nenhuma atualiza√ß√£o para executar na IMPRESSAO_ITENS")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar IMPRESSAO_ITENS: {e}")
        return False

@app.route('/criar-colunas-impressao-itens', methods=['POST'])
@login_required
def criar_colunas_impressao_itens_route():
    """Rota para criar/verificar colunas da aba IMPRESSAO_ITENS"""
    try:
        if criar_colunas_impressao_itens():
            return jsonify({
                'success': True,
                'message': 'Colunas da aba IMPRESSAO_ITENS criadas/verificadas com sucesso!'
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Erro ao criar/verificar colunas da aba IMPRESSAO_ITENS'
            }), 500
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro: {str(e)}'
        }), 500

@app.route('/criar-aba-realizar-baixa', methods=['POST'])
@login_required
def criar_aba_realizar_baixa_route():
    """Rota para criar a aba 'Realizar baixa'"""
    try:
        if criar_aba_realizar_baixa():
            return jsonify({
                'success': True,
                'message': 'Aba "Realizar baixa" criada com sucesso!'
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Erro ao criar aba "Realizar baixa"'
            }), 500
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro: {str(e)}'
        }), 500

@app.route('/salvar-processamento-romaneio', methods=['POST'])
@login_required
def salvar_processamento_romaneio():
    """Processa romaneio usando arquitetura otimizada"""
    try:
        print("üöÄ PROCESSAMENTO OTIMIZADO DE ROMANEIO INICIADO!")
        
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'message': 'Dados JSON n√£o encontrados'}), 400
        
        id_romaneio = data.get('id_romaneio')
        itens_processados = data.get('itens', [])
        observacoes_gerais = data.get('observacoes_gerais', '')
        checkbox_data = data.get('checkbox_data', {})
        
        print(f"üì¶ Processando romaneio {id_romaneio} com {len(itens_processados)} itens")
        print(f"üîç Dados do formul√°rio recebidos: {itens_processados}")
        print(f"üìù Observa√ß√µes gerais: '{observacoes_gerais}'")
        print(f"üìã Dados dos checkboxes: {checkbox_data}")
        
        # Processar checkboxes primeiro
        if checkbox_data:
            excluir_items = checkbox_data.get('excluir', [])
            falta_items = checkbox_data.get('falta', [])
            
            print(f"üóëÔ∏è Processando {len(excluir_items)} itens para EXCLUIR (Finalizado)")
            print(f"‚ö†Ô∏è Processando {len(falta_items)} itens para FALTA")
            
            # Processar itens para excluir (status = Finalizado)
            for item_excluir in excluir_items:
                item_id = item_excluir['id']
                observacao = item_excluir['observacao']
                qtd_separada = int(item_excluir.get('qtd_separada', 0))
                print(f"üóëÔ∏è Marcando item {item_id} como FINALIZADO - Obs: '{observacao}', Qtd: {qtd_separada}")
                
                # Verificar se j√° existe este item nos itens_processados
                item_existente = None
                for item in itens_processados:
                    if item.get('id_solicitacao') == item_id:
                        item_existente = item
                        break
                
                if item_existente:
                    # Atualizar item existente com status especial
                    item_existente['status_especial'] = 'Finalizado'
                    item_existente['observacoes'] = observacao
                else:
                    # Adicionar aos itens processados com status especial
                    item_excluir_data = {
                        'id_solicitacao': item_id,
                        'qtd_separada': qtd_separada,
                        'observacoes': observacao,
                        'excluir': True,
                        'status_especial': 'Finalizado'
                    }
                    itens_processados.append(item_excluir_data)
            
            # Processar itens para falta (status = Falta)
            for item_falta in falta_items:
                item_id = item_falta['id']
                observacao = item_falta['observacao']
                qtd_separada = int(item_falta.get('qtd_separada', 0))
                print(f"‚ö†Ô∏è Marcando item {item_id} como FALTA - Obs: '{observacao}', Qtd: {qtd_separada}")
                
                # Verificar se j√° existe este item nos itens_processados
                item_existente = None
                for item in itens_processados:
                    if item.get('id_solicitacao') == item_id:
                        item_existente = item
                        break
                
                if item_existente:
                    # Atualizar item existente com status especial
                    item_existente['status_especial'] = 'Falta'
                    if observacao:
                        item_existente['observacoes'] = observacao
                else:
                    # Adicionar aos itens processados com status especial
                    item_falta_data = {
                        'id_solicitacao': item_id,
                        'qtd_separada': qtd_separada,
                        'observacoes': observacao,
                        'falta': True,
                        'status_especial': 'Falta'
                    }
                    itens_processados.append(item_falta_data)
        
        # 1. Buscar apenas solicita√ß√µes ativas (otimizado)
        solicitacoes_ativas, header = buscar_solicitacoes_ativas()
        if solicitacoes_ativas is None:
            return jsonify({'success': False, 'message': 'Erro ao conectar com Google Sheets'})
        
        print(f"üìã Solicita√ß√µes ativas encontradas: {len(solicitacoes_ativas)}")
        print(f"üìã Header das solicita√ß√µes: {header}")
        
        # Debug: mostrar algumas linhas das solicita√ß√µes ativas
        if solicitacoes_ativas:
            print(f"üîç Primeiras 3 linhas das solicita√ß√µes ativas:")
            for i, row in enumerate(solicitacoes_ativas[:3]):
                print(f"   Linha {i}: {row[:5]}... (total: {len(row)} colunas)")
                if len(row) > 15:
                    print(f"      Coluna P (ID_SOLICITACAO): '{row[15]}'")
                else:
                    print(f"      ‚ùå Linha {i} tem apenas {len(row)} colunas, coluna P n√£o existe")
        else:
            print("‚ùå Nenhuma solicita√ß√£o ativa encontrada!")
        
        # 2. Buscar TODOS os itens do romaneio na IMPRESSAO_ITENS
        sheet = get_google_sheets_connection()
        impressao_itens_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
        all_itens_romaneio = impressao_itens_worksheet.get_all_values()
        
        # Encontrar todos os itens deste romaneio
        itens_romaneio = []
        for i, row in enumerate(all_itens_romaneio[1:], start=2):  # Pular cabe√ßalho
            if len(row) > 0 and row[0] == id_romaneio:  # ID_IMPRESSAO
                itens_romaneio.append({
                    'linha': i,
                    'id_solicitacao': row[1] if len(row) > 1 else '',  # ID_SOLICITACAO
                    'row_data': row
                })
        
        print(f"üìã Encontrados {len(itens_romaneio)} itens do romaneio {id_romaneio} na IMPRESSAO_ITENS")
        
        # 3. Processar TODOS os itens do romaneio (mesmo com quantidade zero)
        itens_atualizados = []
        print(f"üîÑ Processando TODOS os {len(itens_romaneio)} itens do romaneio...")
        
        for item_romaneio in itens_romaneio:
            id_solicitacao = item_romaneio['id_solicitacao']
            
            # Buscar dados do formul√°rio para este item
            dados_formulario = None
            for item_form in itens_processados:
                if item_form.get('id_solicitacao') == id_solicitacao:
                    dados_formulario = item_form
                    break
            
            # Se n√£o encontrou no formul√°rio, usar valores padr√£o
            if not dados_formulario:
                qtd_separada = 0
                observacoes = ''
                status_especial = None
                print(f"‚ö†Ô∏è Item {id_solicitacao} n√£o encontrado no formul√°rio - usando valores padr√£o (Qtd: 0)")
            else:
                qtd_separada = int(dados_formulario.get('qtd_separada', 0))
                observacoes = dados_formulario.get('observacoes', '')
                status_especial = dados_formulario.get('status_especial')
                print(f"‚úÖ Item {id_solicitacao} encontrado no formul√°rio - Qtd: {qtd_separada}, Obs: '{observacoes}', Status Especial: {status_especial}")
            
            # Processar item (SEMPRE, mesmo com quantidade zero)
            print(f"üîÑ Processando item {id_solicitacao} com quantidade {qtd_separada}...")
            resultado = processar_baixa_item(
                id_solicitacao, qtd_separada, observacoes, 
                solicitacoes_ativas, header, status_especial
            )
            
            if resultado:
                itens_atualizados.append(resultado)
                print(f"‚úÖ Item {id_solicitacao} processado com sucesso!")
            else:
                print(f"‚ùå Erro ao processar item {id_solicitacao}!")
        
        if not itens_atualizados:
            return jsonify({'success': False, 'message': 'Nenhum item v√°lido para processar'})
        
        # 4. Atualizar planilha de solicita√ß√µes
        solicitacoes_worksheet = sheet.worksheet("Solicita√ß√µes")
        
        atualizacoes = []
        for item in itens_atualizados:
            col_indices = item['col_indices']
            row_index = item['row_index']
            
            # Converter √≠ndices para letras
            def col_index_to_letter(col_index):
                result = ""
                while col_index >= 0:
                    result = chr(65 + (col_index % 26)) + result
                    col_index = col_index // 26 - 1
                return result
            
            atualizacoes.extend([
                {
                    'range': f'{col_index_to_letter(col_indices["qtd_separada"])}{row_index}',
                    'values': [[str(item['qtd_separada_total'])]]
                },
                {
                    'range': f'{col_index_to_letter(col_indices["status"])}{row_index}',
                    'values': [[item['status']]]
                },
                {
                    'range': f'{col_index_to_letter(col_indices["saldo"])}{row_index}',
                    'values': [[str(item['saldo'])]]
                }
            ])
        
        # Executar atualiza√ß√µes em lote
        if atualizacoes:
            print(f"üîÑ EXECUTANDO {len(atualizacoes)} ATUALIZA√á√ïES NA PLANILHA SOLICITA√á√ïES:")
            for atualizacao in atualizacoes:
                print(f"   üìç {atualizacao['range']}: {atualizacao['values']}")
            
            solicitacoes_worksheet.batch_update(atualizacoes)
            print(f"‚úÖ {len(atualizacoes)} atualiza√ß√µes realizadas na planilha Solicita√ß√µes")
        
        # 5. Atualizar IMPRESSAO_ITENS
        usuario_atual = current_user.username if current_user.is_authenticated else 'Sistema'
        print(f"üîÑ Atualizando IMPRESSAO_ITENS com {len(itens_processados)} itens...")
        resultado_impressao_itens = atualizar_imprecao_itens(id_romaneio, itens_processados, usuario_atual)
        if resultado_impressao_itens:
            print("‚úÖ IMPRESSAO_ITENS atualizada com sucesso!")
        else:
            print("‚ùå Erro ao atualizar IMPRESSAO_ITENS!")
        
        # 5. Marcar romaneio como processado e atualizar dados de processamento
        print(f"üîÑ ATUALIZANDO ABA IMPRESSOES...")
        print(f"üîç Buscando romaneio {id_romaneio} na aba IMPRESSOES...")
        
        impressoes_worksheet = sheet.worksheet("IMPRESSOES")
        impressoes_values = impressoes_worksheet.get_all_values()
        
        print(f"üìä Total de linhas na aba IMPRESSOES: {len(impressoes_values)}")
        print(f"üìã Cabe√ßalho IMPRESSOES: {impressoes_values[0] if impressoes_values else 'VAZIO'}")
        
        # Encontrar colunas necess√°rias
        header_impressoes = impressoes_values[0] if impressoes_values else []
        col_indices_impressoes = {}
        for i, col_name in enumerate(header_impressoes):
            col_name_clean = col_name.strip()
            print(f"   Coluna {i}: '{col_name_clean}'")
            if col_name_clean == 'STATUS':
                col_indices_impressoes['status'] = i
            elif col_name_clean == 'DATA_PROCESSAMENTO':
                col_indices_impressoes['data_processamento'] = i
            elif col_name_clean == 'USUARIO_PROCESSAMENTO':
                col_indices_impressoes['usuario_processamento'] = i
            elif col_name_clean == 'OBSERVACOES':
                col_indices_impressoes['observacoes'] = i
                print(f"   ‚úÖ Coluna OBSERVACOES encontrada na posi√ß√£o {i}")
        
        print(f"üìç Colunas IMPRESSOES encontradas: {col_indices_impressoes}")
        
        # Se n√£o encontrou a coluna USUARIO_PROCESSAMENTO, criar
        if 'usuario_processamento' not in col_indices_impressoes:
            print("‚ö†Ô∏è Coluna USUARIO_PROCESSAMENTO n√£o encontrada - criando...")
            impressoes_worksheet.add_cols(1)
            # Adicionar cabe√ßalho na nova coluna
            ultima_coluna = len(header_impressoes)
            impressoes_worksheet.update(f'{chr(65 + ultima_coluna)}1', [['USUARIO_PROCESSAMENTO']])
            col_indices_impressoes['usuario_processamento'] = ultima_coluna
            print(f"‚úÖ Coluna USUARIO_PROCESSAMENTO criada na posi√ß√£o {ultima_coluna}")
        
        romaneio_encontrado = False
        for i, row in enumerate(impressoes_values[1:], start=2):
            if len(row) > 0 and row[0] == id_romaneio:
                print(f"‚úÖ Romaneio {id_romaneio} encontrado na linha {i}")
                romaneio_encontrado = True
                
                # Atualizar status
                if 'status' in col_indices_impressoes:
                    col_letra = chr(65 + col_indices_impressoes["status"])
                    impressoes_worksheet.update(f'{col_letra}{i}', [['Processado']])
                    print(f"   üìã Status atualizado para 'Processado' -> {col_letra}{i}")
                else:
                    print(f"   ‚ùå Coluna 'Status' n√£o encontrada!")
                
                # Atualizar data de processamento
                if 'data_processamento' in col_indices_impressoes:
                    data_processamento = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    col_letra = chr(65 + col_indices_impressoes["data_processamento"])
                    impressoes_worksheet.update(f'{col_letra}{i}', [[data_processamento]])
                    print(f"   üìÖ Data processamento: {data_processamento} -> {col_letra}{i}")
                else:
                    print(f"   ‚ùå Coluna 'Data_Processamento' n√£o encontrada!")
                
                # Atualizar usu√°rio que processou
                if 'usuario_processamento' in col_indices_impressoes:
                    usuario_atual = current_user.username if current_user.is_authenticated else 'Sistema'
                    col_letra = chr(65 + col_indices_impressoes["usuario_processamento"])
                    impressoes_worksheet.update(f'{col_letra}{i}', [[usuario_atual]])
                    print(f"   üë§ Usu√°rio processamento: {usuario_atual} -> {col_letra}{i}")
                else:
                    print(f"   ‚ùå Coluna 'Usuario_Processamento' n√£o encontrada!")
                
                # Atualizar observa√ß√µes gerais (sempre, mesmo se vazio)
                if 'observacoes' in col_indices_impressoes:
                    col_letra = chr(65 + col_indices_impressoes["observacoes"])
                    # Sempre atualizar, mesmo se observacoes_gerais estiver vazio
                    impressoes_worksheet.update(f'{col_letra}{i}', [[observacoes_gerais]])
                    print(f"   üìù Observa√ß√µes gerais: '{observacoes_gerais}' -> {col_letra}{i}")
                else:
                    print(f"   ‚ö†Ô∏è Coluna OBSERVACOES n√£o encontrada na aba IMPRESSOES!")
                    print(f"   üìã Colunas dispon√≠veis: {list(col_indices_impressoes.keys())}")
                
                print(f"‚úÖ Romaneio {id_romaneio} marcado como processado na linha {i}")
                break
        
        if not romaneio_encontrado:
            print(f"‚ùå Romaneio {id_romaneio} N√ÉO encontrado na aba IMPRESSOES!")
            print(f"   Verificando estrutura da planilha...")
            print(f"   Primeiras 5 linhas da aba IMPRESSOES:")
            for j, row in enumerate(impressoes_values[:5]):
                print(f"     Linha {j}: {row}")
            print(f"   üîç Procurando por ID: '{id_romaneio}'")
            print(f"   üìã IDs encontrados nas primeiras linhas:")
            for j, row in enumerate(impressoes_values[1:6], start=1):
                if len(row) > 0:
                    print(f"     Linha {j+1}: ID = '{row[0]}'")
        
        # 6. Salvar dados na aba "Realizar baixa" para controle externo
        print(f"üîÑ SALVANDO DADOS NA ABA 'REALIZAR BAIXA'...")
        usuario_atual = current_user.username if current_user.is_authenticated else 'Sistema'
        resultado_realizar_baixa = salvar_dados_realizar_baixa(id_romaneio, itens_processados, usuario_atual)
        if resultado_realizar_baixa:
            print("‚úÖ Dados salvos na aba 'Realizar baixa' com sucesso!")
        else:
            print("‚ö†Ô∏è Erro ao salvar dados na aba 'Realizar baixa' (n√£o cr√≠tico)")
        
        return jsonify({
            'success': True, 
            'message': f'Romaneio {id_romaneio} processado com sucesso!',
            'itens_atualizados': len(itens_atualizados)
        })
        
    except Exception as e:
        print(f"‚ùå Erro no processamento otimizado: {e}")
        return jsonify({'success': False, 'message': f'Erro: {str(e)}'})

@app.route('/reimprimir-romaneio/<id_impressao>')
@login_required
def reimprimir_romaneio(id_impressao):
    """Reimprime um romaneio existente gerando uma c√≥pia com marca d'√°gua"""
    try:
        from pdf_generator import buscar_pdf_romaneio, gerar_e_salvar_romaneio_pdf
        from datetime import datetime
        
        print(f"üîÑ Gerando c√≥pia do romaneio: {id_impressao}")
        
        # Buscar dados do romaneio original
        sheet = get_google_sheets_connection()
        if not sheet:
            flash('Erro ao conectar com Google Sheets', 'error')
            return redirect(url_for('controle_impressoes'))
        
        # Buscar dados da impress√£o
        impressoes_worksheet = sheet.worksheet("IMPRESSOES")
        all_values = impressoes_worksheet.get_all_values()
        
        romaneio_data = None
        for row in all_values[1:]:  # Pular cabe√ßalho
            if len(row) >= 4 and row[0] == id_impressao:
                romaneio_data = {
                    'id_impressao': row[0],
                    'data_impressao': row[1],
                    'usuario_impressao': row[2],
                    'status': row[3],
                    'total_itens': int(row[4]) if row[4].isdigit() else 0,
                    'observacoes': row[5] if len(row) > 5 else ''
                }
                break
        
        if not romaneio_data:
            flash('Romaneio n√£o encontrado', 'error')
            return redirect(url_for('controle_impressoes'))
        
        # Buscar itens da impress√£o
        itens_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
        itens_values = itens_worksheet.get_all_values()
        
        itens_data = []
        for row in itens_values[1:]:  # Pular cabe√ßalho
            if len(row) >= 10 and row[1] == id_impressao:
                item = {
                    'data': row[2],
                    'solicitante': row[3],
                    'codigo': row[4],
                    'descricao': row[5],
                    'quantidade': int(row[6]) if row[6].isdigit() else 0,
                    'alta_demanda': row[10].lower() in ['sim', 's', 'yes', 'y', 'true', '1'] if len(row) > 10 else False,
                    'locacao_matriz': row[7],
                    'saldo_estoque': int(row[8]) if row[8].isdigit() else 0,
                    'media_mensal': int(row[9]) if row[9].isdigit() else 0,
                    'qtd_pendente': int(row[6]) if row[6].isdigit() else 0,
                    'qtd_separada': 0
                }
                itens_data.append(item)
        
        # Adicionar data e hora da reimpress√£o aos dados do romaneio
        data_reimpressao = datetime.now()
        romaneio_data['data_reimpressao'] = data_reimpressao.strftime('%d/%m/%Y, %H:%M:%S')
        romaneio_data['is_reprint'] = True
        
        # Renderizar o template HTML (igual ao que aparece na tela)
        html_content = render_template('formulario_impressao.html', 
                                     id_impressao=id_impressao,
                                     solicitacoes=itens_data,
                                     romaneio_data=romaneio_data)
        
        # Gerar PDF com marca d'√°gua de c√≥pia usando o sistema apropriado
        import os
        if os.getenv('GAE_APPLICATION'):
            # Google Cloud - usar ReportLab
            from pdf_cloud_generator import salvar_pdf_cloud
            resultado = salvar_pdf_cloud(html_content, romaneio_data, pasta_destino='Romaneios_Separacao', is_reprint=True)
        else:
            # Desenvolvimento local - usar Chrome headless
            from pdf_browser_generator import salvar_pdf_direto_html
            resultado = salvar_pdf_direto_html(html_content, romaneio_data, pasta_destino='Romaneios_Separacao', is_reprint=True)
        
        if not resultado['success']:
            flash(f'Erro ao gerar c√≥pia: {resultado["message"]}', 'error')
            return redirect(url_for('controle_impressoes'))
        
        # Ler PDF gerado
        if 'file_path' in resultado:
            with open(resultado['file_path'], 'rb') as f:
                pdf_content = f.read()
            filename_for_download = os.path.basename(resultado['file_path'])
        else:
            flash('Erro ao localizar PDF da c√≥pia', 'error')
            return redirect(url_for('controle_impressoes'))
        
        # Retornar PDF para download/visualiza√ß√£o
        from flask import Response
        return Response(
            pdf_content,
            mimetype='application/pdf',
            headers={
                'Content-Disposition': f'inline; filename="{filename_for_download}"'
            }
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao reimprimir romaneio: {e}")
        flash('Erro ao reimprimir romaneio', 'error')
        return redirect(url_for('controle_impressoes'))

@app.route('/detalhes-impressao/<id_impressao>')
@login_required
def detalhes_impressao(id_impressao):
    """Exibe detalhes de uma impress√£o espec√≠fica"""
    try:
        # Buscar itens da impress√£o
        itens = buscar_itens_impressao(id_impressao)
        
        if not itens:
            flash('Impress√£o n√£o encontrada', 'error')
            return redirect(url_for('controle_impressoes'))
        
        # Buscar status da impress√£o na aba IMPRESSOES
        status_impressao = buscar_status_impressao(id_impressao)
        
        return render_template('detalhes_impressao.html', 
                             id_impressao=id_impressao,
                             itens=itens,
                             status_impressao=status_impressao)
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar detalhes da impress√£o: {e}")
        flash('Erro ao carregar detalhes da impress√£o', 'error')
        return redirect(url_for('controle_impressoes'))

# ROTA DESATIVADA - Bot√£o "Marcar como Processada" removido
# @app.route('/processar-impressao/<id_impressao>')
# @login_required
# def processar_impressao(id_impressao):
#     """Exibe tela para processar impress√£o com quantidades separadas - DESATIVADA"""
#     flash('Funcionalidade desativada', 'warning')
#     return redirect(url_for('controle_impressoes'))

# ROTA DESATIVADA - Bot√£o "Marcar como Processada" removido
# @app.route('/processar-impressao-dados/<id_impressao>', methods=['POST'])
# @login_required
# def processar_impressao_dados(id_impressao):
#     """Processa impress√£o com dados de separa√ß√£o - DESATIVADA"""
#     return jsonify({'success': False, 'message': 'Funcionalidade desativada'})

@app.route('/verificar-itens-impressao', methods=['POST'])
@login_required
def verificar_itens_impressao():
    """Verifica quais itens j√° est√£o em impress√£o pendente ou com status 'Em Separa√ß√£o'"""
    try:
        data = request.get_json()
        ids = data.get('ids', [])
        
        if not ids:
            return jsonify({
                'success': True,
                'itens_em_impressao': [],
                'itens_em_separacao': []
            })
        
        # Verificar itens em impress√£o pendente
        itens_em_impressao = verificar_itens_em_impressao_pendente(ids)
        
        # Verificar itens com status "Em Separa√ß√£o"
        itens_em_separacao = verificar_itens_em_separacao(ids)
        
        total_bloqueados = len(itens_em_impressao) + len(itens_em_separacao)
        
        return jsonify({
            'success': True,
            'itens_em_impressao': itens_em_impressao,
            'itens_em_separacao': itens_em_separacao,
            'total_verificados': len(ids),
            'total_bloqueados': total_bloqueados
        })
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar itens em impress√£o: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro ao verificar itens: {str(e)}',
            'itens_em_impressao': [],
            'itens_em_separacao': []
        }), 500

@app.route('/buscar-impressao/<id_impressao>')
@login_required
def buscar_impressao(id_impressao):
    """Busca impress√£o espec√≠fica por ID"""
    try:
        impressao = buscar_impressao_por_id(id_impressao)
        
        if impressao:
            return jsonify({
                'success': True,
                'impressao': impressao
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Impress√£o n√£o encontrada'
            })
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar impress√£o: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }), 500

def buscar_solicitacoes_selecionadas(ids_selecionados):
    """Busca dados das solicita√ß√µes selecionadas do Google Sheets - VERS√ÉO OTIMIZADA"""
    try:
        print(f"üîç Buscando {len(ids_selecionados)} solicita√ß√µes selecionadas...")
        
        # Usar dados j√° carregados em cache para melhor performance
        df = get_google_sheets_data()
        if df is None or df.empty:
            raise Exception("N√£o foi poss√≠vel carregar dados da planilha")
        
        # Carregar dados da matriz (opcional)
        try:
            matriz_data = get_matriz_data_from_sheets()
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao carregar matriz: {e}")
            matriz_data = {}
        
        # Converter IDs para string para compara√ß√£o
        ids_selecionados_str = [str(id) for id in ids_selecionados]
        print(f"üìã IDs procurados: {ids_selecionados_str}")
        
        # Buscar apenas as linhas que cont√™m os IDs selecionados
        solicitacoes_encontradas = []
        
        for index, row in df.iterrows():
            # Verificar se o ID da linha (√≠ndice + 1) est√° na lista de selecionados
            row_id = str(index + 1)
            if row_id in ids_selecionados_str:
                print(f"‚úÖ Encontrada linha {row_id} para processamento")
                try:
                    # Processar data
                    data_str = str(row.get('Data', '')) if pd.notna(row.get('Data', '')) else ''
                    try:
                        if data_str:
                            data_obj = pd.to_datetime(data_str, errors='coerce')
                            if pd.isna(data_obj):
                                data_obj = datetime.now()
                        else:
                            data_obj = datetime.now()
                    except:
                        data_obj = datetime.now()
                    
                    # Gerar ID √∫nico para a solicita√ß√£o
                    try:
                        qtd_str = str(row.get('Quantidade', '')).strip()
                        qtd = int(float(qtd_str)) if qtd_str and qtd_str != '' else 0
                    except (ValueError, TypeError):
                        qtd = 0
                    
                    # Gerar ID √∫nico incluindo o √≠ndice da linha para garantir unicidade
                    id_solicitacao = gerar_id_solicitacao(
                        data_obj,
                        str(row.get('Solicitante', '')),
                        str(row.get('C√≥digo', '')),
                        qtd,
                        timestamp=f"{datetime.now().strftime('%H%M%S%f')[:-3]}_{index}"  # Incluir √≠ndice da linha
                    )
                    
                    # Extrair dados da linha
                    solicitacao = {
                        'id': row_id,  # ID da linha selecionada
                        'id_solicitacao': id_solicitacao,
                        'data': data_obj,
                        'solicitante': str(row.get('Solicitante', '')),
                        'codigo': str(row.get('C√≥digo', '')),
                        'descricao': str(row.get('Descri√ß√£o', '')),
                        'unidade': str(row.get('Unidade', '')),
                        'quantidade': qtd,
                        'status': str(row.get('Status', '')),
                        'qtd_separada': 0,  # Ser√° calculado depois
                        'saldo': str(row.get('Saldo', '')),
                        'locacao_matriz': '1 E5 E03/F03',  # Valor padr√£o
                        'saldo_estoque': 600,  # Valor padr√£o
                        'media_mensal': 41  # Valor padr√£o
                    }
                    
                    # Enriquecer com dados da matriz
                    if matriz_data and solicitacao['codigo'] in matriz_data:
                        matriz_item = matriz_data[solicitacao['codigo']]
                        solicitacao['saldo_estoque'] = matriz_item['saldo_estoque']
                        solicitacao['locacao_matriz'] = matriz_item['locacao_matriz']
                        solicitacao['media_mensal'] = matriz_item['media_mensal']
                    
                    solicitacoes_encontradas.append(solicitacao)
                    print(f"   ‚úÖ Encontrada solicita√ß√£o ID {row_id} -> {id_solicitacao}: {solicitacao['solicitante']} - {solicitacao['codigo']}")
                
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Erro ao processar linha {index + 1}: {e}")
                    continue
        
        print(f"üìù {len(solicitacoes_encontradas)} solicita√ß√µes encontradas no Google Sheets")
        return solicitacoes_encontradas
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar solicita√ß√µes no Google Sheets: {e}")
        return []

def atualizar_status_google_sheets_selecionadas(ids_selecionados):
    """Atualiza status das solicita√ß√µes selecionadas para 'Em Separa√ß√£o' no Google Sheets"""
    try:
        # Conectar com Google Sheets
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        # Acessar a aba "Solicita√ß√µes" (√≠ndice 0)
        worksheet = sheet.get_worksheet(0)
        
        # Obter todos os dados da planilha
        all_values = worksheet.get_all_values()
        
        if not all_values or len(all_values) < 2:
            raise Exception("Planilha de solicita√ß√µes est√° vazia")
        
        # Encontrar as colunas necess√°rias
        headers = all_values[0]
        status_col_index = None
        id_col_index = None
        
        for i, header in enumerate(headers):
            if 'status' in header.lower():
                status_col_index = i
            elif 'id' in header.lower():
                id_col_index = i
        
        if status_col_index is None:
            raise Exception("Coluna 'Status' n√£o encontrada na planilha")
        
        print(f"üìä Coluna de status encontrada no √≠ndice {status_col_index}")
        
        # Converter IDs para string para compara√ß√£o
        ids_selecionados_str = [str(id) for id in ids_selecionados]
        
        # Atualizar apenas as linhas com IDs selecionados
        updates_count = 0
        statuses_to_change = ['Aberta', 'Pendente', 'Aprovada', 'Parcial', 'Concluida']
        
        for row_index, row in enumerate(all_values[1:], start=2):  # Come√ßar da linha 2 (pular cabe√ßalho)
            try:
                # Verificar se a linha tem dados suficientes
                if len(row) <= status_col_index:
                    continue
                
                # Procurar por ID na linha (pode estar em qualquer coluna)
                row_id = None
                for cell in row:
                    if cell.strip() in ids_selecionados_str:
                        row_id = cell.strip()
                        break
                
                # Se encontrou um ID selecionado
                if row_id:
                    current_status = row[status_col_index].strip()
                    
                    # Se o status atual pode ser alterado para "Em Separa√ß√£o"
                    if current_status in statuses_to_change:
                        # Atualizar a coluna de status
                        worksheet.update_cell(row_index, status_col_index + 1, 'Em Separa√ß√£o')  # +1 porque update_cell usa √≠ndice baseado em 1
                        updates_count += 1
                        print(f"   ‚úÖ Linha {row_index}: ID {row_id} - Status '{current_status}' alterado para 'Em Separa√ß√£o'")
                    else:
                        print(f"   ‚ö†Ô∏è Linha {row_index}: ID {row_id} - Status '{current_status}' n√£o pode ser alterado")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao processar linha {row_index}: {e}")
                continue
        
        print(f"üìù {updates_count} linhas atualizadas no Google Sheets")
        return updates_count
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar Google Sheets: {e}")
        raise e

def atualizar_status_google_sheets_impressao():
    """Atualiza status das solicita√ß√µes para 'Em Separa√ß√£o' diretamente no Google Sheets ap√≥s impress√£o"""
    try:
        # Conectar com Google Sheets
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        # Acessar a aba "Solicita√ß√µes" (√≠ndice 0)
        worksheet = sheet.get_worksheet(0)
        
        # Obter todos os dados da planilha
        all_values = worksheet.get_all_values()
        
        if not all_values or len(all_values) < 2:
            raise Exception("Planilha de solicita√ß√µes est√° vazia")
        
        # Encontrar as colunas necess√°rias
        headers = all_values[0]
        status_col_index = None
        
        for i, header in enumerate(headers):
            if 'status' in header.lower():
                status_col_index = i
                break
        
        if status_col_index is None:
            raise Exception("Coluna 'Status' n√£o encontrada na planilha")
        
        print(f"üìä Coluna de status encontrada no √≠ndice {status_col_index}")
        
        # Atualizar todas as linhas que n√£o est√£o em "Em Separa√ß√£o" ou "Falta"
        updates_count = 0
        statuses_to_change = ['Aberta', 'Pendente', 'Aprovada', 'Parcial', 'Concluida']
        
        for row_index, row in enumerate(all_values[1:], start=2):  # Come√ßar da linha 2 (pular cabe√ßalho)
            try:
                # Verificar se a linha tem dados suficientes
                if len(row) <= status_col_index:
                    continue
                
                current_status = row[status_col_index].strip()
                
                # Se o status atual pode ser alterado para "Em Separa√ß√£o"
                if current_status in statuses_to_change:
                    # Atualizar a coluna de status
                    worksheet.update_cell(row_index, status_col_index + 1, 'Em Separa√ß√£o')  # +1 porque update_cell usa √≠ndice baseado em 1
                    updates_count += 1
                    print(f"   ‚úÖ Linha {row_index}: Status '{current_status}' alterado para 'Em Separa√ß√£o'")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao processar linha {row_index}: {e}")
                continue
        
        print(f"üìù {updates_count} linhas atualizadas no Google Sheets")
        return updates_count
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar Google Sheets: {e}")
        raise e

def atualizar_status_google_sheets(solicitacoes_alteradas):
    """Atualiza status das solicita√ß√µes no Google Sheets"""
    try:
        # Conectar com Google Sheets
        sheet = get_google_sheets_connection()
        if not sheet:
            raise Exception("N√£o foi poss√≠vel conectar com Google Sheets")
        
        # Acessar a aba "Solicita√ß√µes" (√≠ndice 0)
        worksheet = sheet.get_worksheet(0)
        
        # Obter todos os dados da planilha
        all_values = worksheet.get_all_values()
        
        if not all_values or len(all_values) < 2:
            raise Exception("Planilha de solicita√ß√µes est√° vazia")
        
        # Encontrar as colunas necess√°rias
        headers = all_values[0]
        status_col_index = None
        data_col_index = None
        solicitante_col_index = None
        codigo_col_index = None
        
        for i, header in enumerate(headers):
            if 'status' in header.lower():
                status_col_index = i
            elif 'data' in header.lower():
                data_col_index = i
            elif 'solicitante' in header.lower():
                solicitante_col_index = i
            elif 'c√≥digo' in header.lower() or 'codigo' in header.lower():
                codigo_col_index = i
        
        if status_col_index is None:
            raise Exception("Coluna 'Status' n√£o encontrada na planilha")
        
        print(f"üìä Colunas encontradas - Status: {status_col_index}, Data: {data_col_index}, Solicitante: {solicitante_col_index}, C√≥digo: {codigo_col_index}")
        
        # Criar dicion√°rio para mapear solicita√ß√µes por chave √∫nica (data + solicitante + codigo)
        solicitacoes_map = {}
        for s in solicitacoes_alteradas:
            # Criar chave √∫nica baseada em data, solicitante e c√≥digo
            key = f"{s['data']}_{s['solicitante']}_{s['codigo']}"
            solicitacoes_map[key] = s
        
        print(f"üîç Procurando {len(solicitacoes_map)} solicita√ß√µes na planilha...")
        
        # Atualizar cada linha na planilha
        updates_count = 0
        for row_index, row in enumerate(all_values[1:], start=2):  # Come√ßar da linha 2 (pular cabe√ßalho)
            try:
                # Extrair dados da linha
                if len(row) <= max(status_col_index, data_col_index or 0, solicitante_col_index or 0, codigo_col_index or 0):
                    continue
                
                row_data = row[data_col_index] if data_col_index is not None else ''
                row_solicitante = row[solicitante_col_index] if solicitante_col_index is not None else ''
                row_codigo = row[codigo_col_index] if codigo_col_index is not None else ''
                
                # Formatar data para compara√ß√£o (assumindo formato DD/MM/YYYY)
                if row_data and '/' in row_data:
                    # Extrair apenas a data (remover hora se houver)
                    data_parte = row_data.split(' ')[0]
                    # Converter para formato de compara√ß√£o
                    try:
                        from datetime import datetime
                        dt = datetime.strptime(data_parte, '%d/%m/%Y')
                        data_formatada = dt.strftime('%d/%m/%Y')
                    except:
                        data_formatada = data_parte
                else:
                    data_formatada = row_data
                
                # Criar chave para compara√ß√£o
                row_key = f"{data_formatada}_{row_solicitante}_{row_codigo}"
                
                # Verificar se esta linha corresponde a uma solicita√ß√£o alterada
                if row_key in solicitacoes_map:
                    # Atualizar a coluna de status
                    worksheet.update_cell(row_index, status_col_index + 1, 'Em Separa√ß√£o')  # +1 porque update_cell usa √≠ndice baseado em 1
                    updates_count += 1
                    print(f"   ‚úÖ Linha {row_index}: {row_solicitante} - {row_codigo} atualizado para 'Em Separa√ß√£o'")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao processar linha {row_index}: {e}")
                continue
        
        print(f"üìù {updates_count} linhas atualizadas no Google Sheets")
        return updates_count
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar Google Sheets: {e}")
        raise e

# Rota de debug para verificar dados da matriz
@app.route('/debug-realizar-baixa')
@login_required
def debug_realizar_baixa():
    """Debug: Verificar dados da aba Realizar baixa"""
    try:
        print("üîç DEBUG: Verificando dados da aba 'Realizar baixa'...")
        
        sheet = get_google_sheets_connection()
        if not sheet:
            return "‚ùå Erro ao conectar com Google Sheets"
        
        # Verificar aba Realizar baixa
        try:
            worksheet = sheet.worksheet("Realizar baixa")
            valores = worksheet.get_all_values()
            
            print(f"üìä Total de linhas na aba 'Realizar baixa': {len(valores)}")
            
            if len(valores) > 0:
                print(f"üìã Cabe√ßalhos: {valores[0]}")
                
                if len(valores) > 1:
                    print("üìÑ Dados encontrados:")
                    for i, row in enumerate(valores[1:], 1):
                        print(f"   Linha {i}: {row}")
                else:
                    print("‚ö†Ô∏è Apenas cabe√ßalhos encontrados")
            else:
                print("‚ùå Aba vazia")
                
        except gspread.WorksheetNotFound:
            print("‚ùå Aba 'Realizar baixa' n√£o existe")
            return "Aba 'Realizar baixa' n√£o existe"
        
        # Verificar aba IMPRESSAO_ITENS para compara√ß√£o
        try:
            impressao_worksheet = sheet.worksheet("IMPRESSAO_ITENS")
            impressao_valores = impressao_worksheet.get_all_values()
            
            print(f"\nüìä Total de linhas na aba 'IMPRESSAO_ITENS': {len(impressao_valores)}")
            
            if len(impressao_valores) > 0:
                print(f"üìã Cabe√ßalhos IMPRESSAO_ITENS: {impressao_valores[0]}")
                
                if len(impressao_valores) > 1:
                    print("üìÑ Primeiras 3 linhas de dados IMPRESSAO_ITENS:")
                    for i, row in enumerate(impressao_valores[1:4], 1):
                        print(f"   Linha {i}: {row[:7]}...")  # Mostrar apenas primeiras 7 colunas
                        
        except gspread.WorksheetNotFound:
            print("‚ùå Aba 'IMPRESSAO_ITENS' n√£o existe")
        
        return f"Debug conclu√≠do. Verifique o console. Total de registros na 'Realizar baixa': {len(valores) if 'valores' in locals() else 0}"
        
    except Exception as e:
        print(f"‚ùå Erro no debug: {e}")
        return f"Erro: {str(e)}"

@app.route('/debug-matriz')
@login_required
def debug_matriz():
    """Debug: Verificar dados da matriz do Google Sheets"""
    print("üîç DEBUG: Verificando dados da matriz do Google Sheets...")
    
    # Buscar dados da matriz do Google Sheets
    matriz_data = get_matriz_data_from_sheets()
    
    print(f"üìä Total de registros na matriz: {len(matriz_data)}")
    
    for codigo, item in matriz_data.items():
        print(f"  - C√≥digo: {codigo}, M√©dia: {item['media_mensal']}, Estoque: {item['saldo_estoque']}")
    
    # Buscar especificamente o c√≥digo "1"
    if "1" in matriz_data:
        item = matriz_data["1"]
        print(f"üéØ C√≥digo '1' encontrado:")
        print(f"   - C√≥digo: {item['codigo']}")
        print(f"   - Descri√ß√£o: {item['descricao']}")
        print(f"   - M√©dia Mensal: {item['media_mensal']}")
        print(f"   - Saldo Estoque: {item['saldo_estoque']}")
        print(f"   - Localiza√ß√£o: {item['locacao_matriz']}")
    else:
        print("‚ùå C√≥digo '1' N√ÉO encontrado na matriz")
    
    return f"Debug conclu√≠do. Verifique o console. Total de registros: {len(matriz_data)}"

# Rota de teste para debug
@app.route('/test-solicitacoes')
@login_required
def test_solicitacoes():
    status_filter = request.args.get('status', '')
    
    print(f"DEBUG TEST: status_filter recebido: '{status_filter}' (tipo: {type(status_filter)})")
    
    query = Solicitacao.query
    if status_filter:
        print(f"DEBUG TEST: Aplicando filtro para status: '{status_filter}'")
        query = query.filter_by(status=status_filter)
        count_antes = query.count()
        print(f"DEBUG TEST: Total de registros ap√≥s filtro: {count_antes}")
    
    # Ordenar por data decrescente e buscar todos os registros
    solicitacoes_list = query.order_by(Solicitacao.data.asc()).all()
    print(f"DEBUG TEST: Total de registros retornados: {len(solicitacoes_list)}")
    
    # Enriquecer com dados da matriz do Google Sheets
    matriz_data = get_matriz_data_from_sheets()
    for solicitacao in solicitacoes_list:
        if matriz_data and solicitacao.codigo in matriz_data:
            matriz_item = matriz_data[solicitacao.codigo]
            solicitacao.saldo_estoque = matriz_item['saldo_estoque']
            solicitacao.locacao_matriz = matriz_item['locacao_matriz']
            solicitacao.media_mensal = matriz_item['media_mensal']
        else:
            solicitacao.saldo_estoque = 0
            solicitacao.locacao_matriz = None
            solicitacao.media_mensal = 0
    
    
    solicitacoes = CompleteList(solicitacoes_list)
    
    print(f"DEBUG TEST: Enviando para template - total: {solicitacoes.total}, items: {len(solicitacoes.items)}")
    
    return render_template('test_solicitacoes.html', 
                         solicitacoes=solicitacoes, 
                         status_filter=status_filter)

# Funcionalidade de cria√ß√£o de solicita√ß√µes removida

# Funcionalidade de baixa de estoque
@app.route('/solicitacoes/<int:id>/baixar', methods=['POST'])
@login_required
def baixar_estoque(id):
    solicitacao = Solicitacao.query.get_or_404(id)
    quantidade_separada = int(request.form['quantidade_separada'])
    
    # Verificar se a solicita√ß√£o est√° em separa√ß√£o
    if solicitacao.status != 'Em Separa√ß√£o':
        log_activity('baixar_estoque', 'Solicitacao', id, f'Tentativa de baixa em status inv√°lido: {solicitacao.status}', 'erro')
        flash('Apenas solicita√ß√µes em separa√ß√£o podem ter baixa registrada!', 'error')
        return redirect(url_for('solicitacoes'))
    
    # Verificar se a quantidade n√£o excede o solicitado
    if quantidade_separada > solicitacao.quantidade:
        flash('Quantidade separada n√£o pode ser maior que a solicitada!', 'error')
        return redirect(url_for('solicitacoes'))
    
    # Atualizar quantidade separada (somar com valor existente)
    solicitacao.qtd_separada += quantidade_separada
    
    # Calcular saldo restante
    solicitacao.saldo = solicitacao.quantidade - solicitacao.qtd_separada
    
    # Atualizar status baseado na quantidade separada
    if solicitacao.qtd_separada == solicitacao.quantidade:
        solicitacao.status = 'Concluida'
        solicitacao.data_separacao = datetime.utcnow()
        solicitacao.separado_por = current_user.username
    elif solicitacao.qtd_separada > 0:
        solicitacao.status = 'Entrega Parcial'
        if not solicitacao.data_separacao:
            solicitacao.data_separacao = datetime.utcnow()
        if not solicitacao.separado_por:
            solicitacao.separado_por = current_user.username
    
    db.session.commit()
    
    # Log da opera√ß√£o
    log_activity('baixar_estoque', 'Solicitacao', id, 
                f'Baixa registrada: {quantidade_separada} unidades. Status alterado para: {solicitacao.status}', 
                'sucesso')
    
    flash(f'Baixa registrada! {quantidade_separada} unidades separadas. Status: {solicitacao.status}', 'success')
    return redirect(url_for('solicitacoes'))

# Funcionalidade para colocar em separa√ß√£o
@app.route('/solicitacoes/<int:id>/separar', methods=['POST'])
@login_required
def colocar_em_separacao(id):
    solicitacao = Solicitacao.query.get_or_404(id)
    
    # Verificar se pode ser colocada em separa√ß√£o
    if solicitacao.status not in ['pendente', 'aprovada']:
        log_activity('separar', 'Solicitacao', id, f'Tentativa de separa√ß√£o em status inv√°lido: {solicitacao.status}', 'erro')
        flash('Apenas solicita√ß√µes pendentes ou aprovadas podem ser colocadas em separa√ß√£o!', 'error')
        return redirect(url_for('solicitacoes'))
    
    solicitacao.status = 'Em Separa√ß√£o'
    db.session.commit()
    
    # Log da opera√ß√£o
    log_activity('separar', 'Solicitacao', id, f'Solicita√ß√£o colocada em separa√ß√£o', 'sucesso')
    
    flash('Solicita√ß√£o colocada em separa√ß√£o!', 'success')
    return redirect(url_for('solicitacoes'))

# Rota de debug
@app.route('/debug-solicitacoes')
@login_required
def debug_solicitacoes():
    # Buscar status √∫nicos
    status_list = [s[0] for s in Solicitacao.query.with_entities(Solicitacao.status).distinct().all()]
    
    # Buscar primeiras 10 solicita√ß√µes
    solicitacoes = Solicitacao.query.limit(10).all()
    
    return render_template('debug_solicitacoes.html', 
                         status_list=status_list, 
                         solicitacoes=solicitacoes)

# Funcionalidade de baixa em lote
def update_quantidade_separada_na_planilha(codigo, quantidade_nova):
    """Atualiza a quantidade separada na planilha do Google Sheets"""
    try:
        # Conectar com Google Sheets
        sheet = get_google_sheets_connection()
        if not sheet:
            print("‚ùå N√£o foi poss√≠vel conectar com Google Sheets")
            return False
        
        # Acessar a aba "Solicita√ß√µes"
        worksheet = sheet.get_worksheet(0)
        
        # Obter todos os dados
        all_values = worksheet.get_all_values()
        if not all_values:
            print("‚ùå Planilha est√° vazia")
            return False
        
        # Encontrar o cabe√ßalho
        headers = all_values[0]
        print(f"üìã Cabe√ßalhos encontrados: {headers}")
        
        # Procurar colunas relevantes
        codigo_col = None
        qtd_separada_col = None
        status_col = None
        quantidade_col = None
        saldo_col = None
        
        for i, header in enumerate(headers):
            header_lower = header.lower().strip()
            print(f"üîç Verificando cabe√ßalho {i}: '{header}' (lower: '{header_lower}')")
            
            if 'c√≥digo' in header_lower or 'codigo' in header_lower:
                codigo_col = i
                print(f"‚úÖ Encontrada coluna C√≥digo na posi√ß√£o {i}")
            elif 'qtd' in header_lower and 'separada' in header_lower:
                qtd_separada_col = i
                print(f"‚úÖ Encontrada coluna Qtd. Separada na posi√ß√£o {i}")
            elif 'status' in header_lower and status_col is None:  # Pegar apenas a primeira coluna Status
                status_col = i
                print(f"‚úÖ Encontrada coluna Status na posi√ß√£o {i}")
            elif 'quantidade' in header_lower:
                quantidade_col = i
                print(f"‚úÖ Encontrada coluna Quantidade na posi√ß√£o {i}")
            elif 'saldo' in header_lower:
                saldo_col = i
                print(f"‚úÖ Encontrada coluna Saldo na posi√ß√£o {i}")
        
        print(f"üìç Resumo das colunas encontradas:")
        print(f"   - C√≥digo: {codigo_col}")
        print(f"   - Qtd. Separada: {qtd_separada_col}")
        print(f"   - Status: {status_col}")
        print(f"   - Quantidade: {quantidade_col}")
        print(f"   - Saldo: {saldo_col}")
        
        if codigo_col is None:
            print("‚ùå Coluna 'C√≥digo' n√£o encontrada")
            return False
        
        if qtd_separada_col is None:
            print("‚ùå Coluna 'Qtd. Separada' n√£o encontrada")
            print("üìã Criando coluna 'Qtd. Separada'...")
            # Adicionar nova coluna
            worksheet.add_cols(1)
            headers.append('Qtd. Separada')
            qtd_separada_col = len(headers) - 1
            # Atualizar cabe√ßalho
            worksheet.update('A1', [headers])
        
        if saldo_col is None:
            print("‚ùå Coluna 'Saldo' n√£o encontrada")
            print("üìã Criando coluna 'Saldo'...")
            # Adicionar nova coluna
            worksheet.add_cols(1)
            headers.append('Saldo')
            saldo_col = len(headers) - 1
            # Atualizar cabe√ßalho
            worksheet.update('A1', [headers])
        
        print(f"üìç Coluna C√≥digo: {codigo_col}, Coluna Qtd. Separada: {qtd_separada_col}")
        
        # Procurar a linha com o c√≥digo
        for row_num, row in enumerate(all_values[1:], start=2):  # Come√ßar da linha 2 (pular cabe√ßalho)
            if len(row) > codigo_col and str(row[codigo_col]).strip() == str(codigo).strip():
                print(f"‚úÖ Encontrada linha {row_num} com c√≥digo {codigo}")
                
                # Obter quantidade atual separada
                qtd_atual = 0
                if len(row) > qtd_separada_col and row[qtd_separada_col].strip():
                    try:
                        qtd_atual = int(row[qtd_separada_col])
                    except (ValueError, TypeError):
                        qtd_atual = 0
                
                # Calcular nova quantidade
                qtd_nova = qtd_atual + quantidade_nova
                
                # Obter quantidade solicitada para calcular status e saldo
                qtd_solicitada = 0
                if quantidade_col is not None and len(row) > quantidade_col and row[quantidade_col].strip():
                    try:
                        qtd_solicitada = int(row[quantidade_col])
                    except (ValueError, TypeError):
                        qtd_solicitada = 0
                
                # Calcular novo saldo: Quantidade Solicitada - Qtd. Separada (nunca menor que 0)
                novo_saldo = max(0, qtd_solicitada - qtd_nova)
                print(f"üí∞ C√°lculo do saldo: {qtd_solicitada} (solicitada) - {qtd_nova} (separada) = {novo_saldo} (m√≠nimo 0)")
                
                # Determinar novo status baseado na l√≥gica de neg√≥cio
                novo_status = ""
                
                if qtd_nova >= qtd_solicitada and qtd_solicitada > 0:
                    if qtd_nova > qtd_solicitada:
                        novo_status = "Excedido"
                    else:
                        novo_status = "Conclu√≠do"
                elif qtd_nova > 0:
                    # Qualquer quantidade separada > 0 e < solicitada = Parcial
                    novo_status = "Parcial"
                else:
                    # Nenhuma quantidade separada = Aberta
                    novo_status = "Aberta"
                
                print(f"üìä L√≥gica de status:")
                print(f"   - Quantidade solicitada: {qtd_solicitada}")
                print(f"   - Quantidade separada: {qtd_nova}")
                print(f"   - Status calculado: {novo_status}")
                
                # Atualizar a c√©lula da quantidade separada
                qtd_cell_address = f"{chr(65 + qtd_separada_col)}{row_num}"
                print(f"üìù Atualizando c√©lula {qtd_cell_address} com valor {qtd_nova}")
                try:
                    worksheet.update(qtd_cell_address, [[qtd_nova]])
                    print(f"‚úÖ Quantidade separada atualizada com sucesso na c√©lula {qtd_cell_address}")
                except Exception as e:
                    print(f"‚ùå Erro ao atualizar quantidade separada: {e}")
                
                # Atualizar a c√©lula do status se a coluna existir
                if status_col is not None and novo_status:
                    status_cell_address = f"{chr(65 + status_col)}{row_num}"
                    print(f"üìù Atualizando status {status_cell_address} para '{novo_status}'")
                    try:
                        worksheet.update(status_cell_address, [[novo_status]])
                        print(f"‚úÖ Status atualizado com sucesso na c√©lula {status_cell_address}")
                    except Exception as e:
                        print(f"‚ùå Erro ao atualizar status: {e}")
                else:
                    if status_col is None:
                        print("‚ùå Coluna Status n√£o encontrada - n√£o √© poss√≠vel atualizar status")
                    if not novo_status:
                        print("‚ùå Novo status vazio - n√£o √© poss√≠vel atualizar")
                
                # Atualizar a c√©lula do saldo se a coluna existir
                if saldo_col is not None:
                    saldo_cell_address = f"{chr(65 + saldo_col)}{row_num}"
                    print(f"üìù Atualizando saldo {saldo_cell_address} para '{novo_saldo}'")
                    try:
                        worksheet.update(saldo_cell_address, [[novo_saldo]])
                        print(f"‚úÖ Saldo atualizado com sucesso na c√©lula {saldo_cell_address}")
                    except Exception as e:
                        print(f"‚ùå Erro ao atualizar saldo: {e}")
                else:
                    print("‚ùå Coluna Saldo n√£o encontrada - n√£o √© poss√≠vel atualizar saldo")
                
                print(f"‚úÖ Quantidade separada atualizada: {qtd_atual} + {quantidade_nova} = {qtd_nova}")
                print(f"‚úÖ Status atualizado para: {novo_status}")
                print(f"‚úÖ Saldo atualizado para: {novo_saldo}")
                return True
        
        print(f"‚ùå C√≥digo {codigo} n√£o encontrado na planilha")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar planilha: {e}")
        return False

@app.route('/solicitacoes/<int:id>/complementar', methods=['POST'])
@login_required
def complementar_quantidade(id):
    """Complementa a quantidade separada de uma solicita√ß√£o na planilha do Google Sheets"""
    try:
        data = request.get_json()
        quantidade_nova = int(data.get('quantidade', 0))
        codigo = data.get('codigo', '')
        
        if quantidade_nova <= 0:
            return jsonify({'success': False, 'message': 'Quantidade deve ser maior que zero'})
        
        if not codigo:
            return jsonify({'success': False, 'message': 'C√≥digo n√£o fornecido'})
        
        # Atualizar na planilha do Google Sheets
        sucesso = update_quantidade_separada_na_planilha(codigo, quantidade_nova)
        
        if sucesso:
            return jsonify({
                'success': True, 
                'message': f'Quantidade {quantidade_nova} adicionada com sucesso na planilha! Status atualizado conforme regra de neg√≥cio.',
                'qtd_separada': quantidade_nova,
                'codigo': codigo,
                'status': 'Atualizado'
            })
        else:
            return jsonify({
                'success': False, 
                'message': 'Erro ao atualizar a planilha do Google Sheets'
            })
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'Erro ao complementar quantidade: {str(e)}'})

@app.route('/solicitacoes/baixar-lote', methods=['POST'])
@login_required
def baixar_estoque_lote():
    try:
        # Obter IDs das solicita√ß√µes selecionadas
        solicitacao_ids = request.form.getlist('solicitacao_ids')
        
        if not solicitacao_ids:
            log_activity('baixar_lote', 'Solicitacao', None, 'Tentativa de baixa em lote sem sele√ß√£o', 'erro')
            flash('Nenhuma solicita√ß√£o selecionada!', 'error')
            return redirect(url_for('solicitacoes'))
        
        baixas_registradas = 0
        
        for solicitacao_id in solicitacao_ids:
            solicitacao = Solicitacao.query.get(int(solicitacao_id))
            
            if not solicitacao:
                continue
                
            # Verificar se a solicita√ß√£o est√° em separa√ß√£o
            if solicitacao.status != 'Em Separa√ß√£o':
                continue
            
            # Obter quantidade a separar
            quantidade_key = f'quantidades_{solicitacao_id}'
            quantidade_separada = request.form.get(quantidade_key)
            
            if not quantidade_separada:
                continue
                
            quantidade_separada = int(quantidade_separada)
            
            # Verificar se a quantidade n√£o excede o solicitado
            if quantidade_separada > (solicitacao.quantidade - solicitacao.qtd_separada):
                flash(f'Solicita√ß√£o #{solicitacao_id}: Quantidade excede o permitido!', 'warning')
                continue
            
            # Atualizar quantidade separada (somar com valor existente)
            solicitacao.qtd_separada += quantidade_separada
            
            # Calcular saldo restante (nunca menor que 0)
            solicitacao.saldo = max(0, solicitacao.quantidade - solicitacao.qtd_separada)
            
            # Atualizar status baseado na quantidade separada
            if solicitacao.qtd_separada == solicitacao.quantidade:
                solicitacao.status = 'Concluida'
                solicitacao.data_separacao = datetime.utcnow()
                solicitacao.separado_por = current_user.username
            elif solicitacao.qtd_separada > 0:
                solicitacao.status = 'Entrega Parcial'
                if not solicitacao.data_separacao:
                    solicitacao.data_separacao = datetime.utcnow()
                if not solicitacao.separado_por:
                    solicitacao.separado_por = current_user.username
            
            baixas_registradas += 1
        
        db.session.commit()
        
        if baixas_registradas > 0:
            log_activity('baixar_lote', 'Solicitacao', None, f'Baixa em lote: {baixas_registradas} solicita√ß√µes processadas', 'sucesso')
            flash(f'Baixa em lote realizada! {baixas_registradas} solicita√ß√µes processadas.', 'success')
        else:
            log_activity('baixar_lote', 'Solicitacao', None, 'Baixa em lote: nenhuma solicita√ß√£o processada', 'aviso')
            flash('Nenhuma baixa foi registrada. Verifique as solicita√ß√µes selecionadas.', 'warning')
            
    except Exception as e:
        db.session.rollback()
        flash(f'Erro ao processar baixa em lote: {str(e)}', 'error')
    
    return redirect(url_for('solicitacoes'))

# Rotas de Logs
@app.route('/logs')
@login_required
def logs():
    """P√°gina de visualiza√ß√£o de logs"""
    page = request.args.get('page', 1, type=int)
    per_page = 50
    
    # Filtros
    acao_filter = request.args.get('acao', '')
    entidade_filter = request.args.get('entidade', '')
    usuario_filter = request.args.get('usuario', '')
    status_filter = request.args.get('status', '')
    data_inicio = request.args.get('data_inicio', '')
    data_fim = request.args.get('data_fim', '')
    
    # Construir query
    query = Log.query
    
    if acao_filter:
        query = query.filter(Log.acao.contains(acao_filter))
    if entidade_filter:
        query = query.filter(Log.entidade.contains(entidade_filter))
    if usuario_filter:
        query = query.filter(Log.usuario_nome.contains(usuario_filter))
    if status_filter:
        query = query.filter(Log.status == status_filter)
    if data_inicio:
        try:
            data_inicio_obj = datetime.strptime(data_inicio, '%Y-%m-%d')
            query = query.filter(Log.timestamp >= data_inicio_obj)
        except ValueError:
            pass
    if data_fim:
        try:
            data_fim_obj = datetime.strptime(data_fim, '%Y-%m-%d')
            query = query.filter(Log.timestamp <= data_fim_obj)
        except ValueError:
            pass
    
    # Ordenar por timestamp decrescente
    logs = query.order_by(Log.timestamp.desc()).paginate(
        page=page, per_page=per_page, error_out=False
    )
    
    # Estat√≠sticas
    total_logs = Log.query.count()
    logs_hoje = Log.query.filter(Log.timestamp >= datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)).count()
    logs_erro = Log.query.filter(Log.status == 'erro').count()
    
    stats = {
        'total': total_logs,
        'hoje': logs_hoje,
        'erros': logs_erro
    }
    
    return render_template('logs.html', 
                         logs=logs, 
                         stats=stats,
                         acao_filter=acao_filter,
                         entidade_filter=entidade_filter,
                         usuario_filter=usuario_filter,
                         status_filter=status_filter,
                         data_inicio=data_inicio,
                         data_fim=data_fim)

@app.route('/logs/export')
@login_required
def export_logs():
    """Exportar logs para CSV"""
    import csv
    import io
    
    # Aplicar mesmos filtros da p√°gina
    acao_filter = request.args.get('acao', '')
    entidade_filter = request.args.get('entidade', '')
    usuario_filter = request.args.get('usuario', '')
    status_filter = request.args.get('status', '')
    data_inicio = request.args.get('data_inicio', '')
    data_fim = request.args.get('data_fim', '')
    
    query = Log.query
    
    if acao_filter:
        query = query.filter(Log.acao.contains(acao_filter))
    if entidade_filter:
        query = query.filter(Log.entidade.contains(entidade_filter))
    if usuario_filter:
        query = query.filter(Log.usuario_nome.contains(usuario_filter))
    if status_filter:
        query = query.filter(Log.status == status_filter)
    if data_inicio:
        try:
            data_inicio_obj = datetime.strptime(data_inicio, '%Y-%m-%d')
            query = query.filter(Log.timestamp >= data_inicio_obj)
        except ValueError:
            pass
    if data_fim:
        try:
            data_fim_obj = datetime.strptime(data_fim, '%Y-%m-%d')
            query = query.filter(Log.timestamp <= data_fim_obj)
        except ValueError:
            pass
    
    logs = query.order_by(Log.timestamp.desc()).all()
    
    # Criar CSV
    output = io.StringIO()
    writer = csv.writer(output)
    
    # Cabe√ßalho
    writer.writerow(['ID', 'Data/Hora', 'Usu√°rio', 'A√ß√£o', 'Entidade', 'ID Entidade', 'Detalhes', 'IP', 'Status'])
    
    # Dados
    for log in logs:
        writer.writerow([
            log.id,
            log.timestamp.strftime('%d/%m/%Y %H:%M:%S') if log.timestamp else '',
            log.usuario_nome,
            log.acao,
            log.entidade,
            log.entidade_id or '',
            log.detalhes or '',
            log.ip_address or '',
            log.status
        ])
    
    output.seek(0)
    
    # Criar resposta
    response = make_response(output.getvalue())
    response.headers['Content-Type'] = 'text/csv; charset=utf-8'
    response.headers['Content-Disposition'] = f'attachment; filename=logs_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
    
    return response

# API removida - n√£o precisamos mais de produtos


if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        
        # OTIMIZA√á√ÉO: Criar √≠ndices para melhorar performance
        try:
            print("üöÄ Criando √≠ndices de otimiza√ß√£o...")
            with db.engine.connect() as conn:
                indices = [
                    "CREATE INDEX IF NOT EXISTS idx_user_username ON user (username)",
                    "CREATE INDEX IF NOT EXISTS idx_user_email ON user (email)",
                    "CREATE INDEX IF NOT EXISTS idx_produto_codigo ON produto (codigo)",
                    "CREATE INDEX IF NOT EXISTS idx_produto_categoria ON produto (categoria)"
                ]
                
                for indice in indices:
                    try:
                        conn.execute(db.text(indice))
                        print(f"‚úÖ √çndice criado: {indice.split('idx_')[1].split(' ')[0]}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erro ao criar √≠ndice: {e}")
                        
            print("‚úÖ √çndices de otimiza√ß√£o criados com sucesso!")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao criar √≠ndices: {e}")
        
        # Criar usu√°rio admin padr√£o se n√£o existir
        if not User.query.filter_by(username='admin').first():
            admin = User(username='admin', email='marcosvinicius.info@gmail.com', is_admin=True)
            admin.set_password('admin123')
            db.session.add(admin)
            db.session.commit()
            print("‚úÖ Usu√°rio admin criado: admin / admin123")
            print("üí° Para criar mais usu√°rios, execute: python criar_usuarios.py")
    
    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
